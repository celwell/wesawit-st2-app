// Generated by CoffeeScript 1.3.3

Ext.define('WSI.view.MediaWall', {
  extend: 'Ext.DataView',
  xtype: 'mediawall',
  config: {
    baseCls: 'mediawall',
    homeButtonDest: 'to-details-from-gallery',
    loadingText: "loading...",
    emptyText: "",
    scrollable: false,
    meanWorthiness: 0,
    flipbookIntervalArrayRef: null,
    listeners: {
      initialize: function(c) {
        return c.refreshItemTpl();
      },
      itemtap: function(c, index, target, record) {
        return c.fireEvent('openGallery', index, c.getStore(), c.config.homeButtonDest);
      }
    },
    itemTpl: [
      "<tpl if='this.isPhoto(pid)'>", "<div class='media-item thumb {status}{[(this.isPhoto(values.pid) ? '' : ' video')]}' style='{[this.getDimCss(values)]}' data-mid='{id}' data-src='{[(this.widthByMid['mid'+values.id] > 300 ? util.image_url(values, 'medium') : util.image_url(values, 'small'))]}'>", "<tpl if='values.status == \"uploading\"'>", "<span id='progress-bar-{id}' class='progress-bar'></span>", "</tpl>", "<span class='timestamp'>", "{[(values.status == 'uploading') ? 'Uploading...' : util.calc_time(values.timestampTaken, false, 'g:ia', true)]}", "</span>", "</div>", "</tpl>", "<tpl if='!this.isPhoto(pid) && (values.status == \"uploading\" || values.status == \"processing\")'>", "<div class='media-item thumb video {status}' style='{[this.getDimCss(values)]} background-image:url({[(this.widthByMid['mid'+values.id] > 300 ? util.image_url(values, 'medium') : util.image_url(values, 'small'))]});' data-mid='{id}' data-src='{[(this.widthByMid['mid'+values.id] > 300 ? util.image_url(values, 'medium') : util.image_url(values, 'small'))]}'>", "<tpl if='values.status == \"uploading\"'>", "<span id='progress-bar-{id}' class='progress-bar'></span>", "</tpl>", "<span class='timestamp'>", "{[(values.status == 'uploading') ? 'Uploading...' : ((values.status == 'processing') ? 'Processing...' : util.calc_time(values.timestampTaken, false, 'g:ia', true))]}", "</span>", "</div>", "</tpl>", "<tpl if='!this.isPhoto(pid) && values.status == \"loaded\"'>", "<div class='media-item thumb video flipbook {status}' style='{[this.getDimCss(values)]}' data-mid='{id}'>", "{[this.getFlipbook(values)]}", "<span class='timestamp'>", "{[util.calc_time(values.timestampTaken, false, 'g:ia', true)]}", "</span>", "</div>", "</tpl>", {
        disableFormats: true,
        widthByMid: {},
        heightByMid: {},
        itemsLeftUntilNextRow: 0,
        widthLeftOnCurrentRow: 0,
        heightOfCurrentRow: null,
        meanWorthiness: 0,
        getDimCss: function(values) {
          var mediaType;
          mediaType = values.pid != null ? 'photo' : 'video';
          if (!(this.widthByMid["mid" + values.id] != null)) {
            if (this.itemsLeftUntilNextRow === 0) {
              if (mediaType === 'photo' && parseInt(values.worthinessCount) + (Math.random() - 0.75) > this.meanWorthiness) {
                this.itemsLeftUntilNextRow = 1;
              } else {
                this.itemsLeftUntilNextRow = Math.floor(Math.random() * 2) + 2;
              }
              if (this.itemsLeftUntilNextRow === 1 && Math.random() < 0.5) {
                this.itemsLeftUntilNextRow = 2;
              }
              this.widthLeftOnCurrentRow = 315 - this.itemsLeftUntilNextRow * 5;
              this.heightOfCurrentRow = Math.floor(Math.random() * 40) + 200 - 40 * this.itemsLeftUntilNextRow;
            }
            if (this.itemsLeftUntilNextRow === 1) {
              this.widthByMid["mid" + values.id] = this.widthLeftOnCurrentRow;
            } else {
              if (parseInt(values.worthinessCount) + (Math.random() - 0.75) > this.meanWorthiness) {
                this.widthByMid["mid" + values.id] = Math.floor(this.widthLeftOnCurrentRow / this.itemsLeftUntilNextRow + 30);
              } else {
                this.widthByMid["mid" + values.id] = Math.floor(this.widthLeftOnCurrentRow / this.itemsLeftUntilNextRow + 60 * (Math.random() - 0.5));
              }
            }
            this.itemsLeftUntilNextRow--;
            this.widthLeftOnCurrentRow -= this.widthByMid["mid" + values.id];
          }
          if (!(this.heightByMid["mid" + values.id] != null)) {
            this.heightByMid["mid" + values.id] = this.heightOfCurrentRow;
          }
          return "width: " + this.widthByMid["mid" + values.id] + "px; height: " + this.heightByMid["mid" + values.id] + "px;";
        },
        isPhoto: function(pid) {
          return pid != null;
        },
        getFlipbook: function(values) {
          var i, result, url, _i;
          result = "";
          for (i = _i = 0; _i < 15; i = ++_i) {
            url = "" + util.S3_BASE_URL + "flipbook_" + values.id + "_" + i + ".jpg";
            if (i === 0) {
              result += "<img src='" + url + "' data-src='" + url + "' class='show' style='z-index: " + (i + 1) + "' />";
            } else if (i === 1) {
              result += "<img src='" + url + "' data-src='" + url + "' style='z-index: " + (i + 1) + "' />";
            } else {
              result += "<img src='#' data-src='" + url + "' style='z-index: " + (i + 1) + "' />";
            }
          }
          return result;
        }
      }
    ]
  },
  refreshItemTpl: function() {
    var i, item, tpl, _ref;
    tpl = this.getItemTpl();
    tpl.widthByMid = {};
    tpl.heightByMid = {};
    tpl.itemsLeftUntilNextRow = 0;
    tpl.widthLeftOnCurrentRow = 0;
    tpl.heightOfCurrentRow = null;
    tpl.meanWorthiness = this.config.meanWorthiness;
    if (this.config.flipbookIntervalArrayRef != null) {
      _ref = this.config.flipbookIntervalArrayRef;
      for (i in _ref) {
        item = _ref[i];
        clearInterval(item.interval);
      }
      this.config.flipbookIntervalArrayRef = {};
    }
    return this.setItemTpl(tpl);
  }
});
