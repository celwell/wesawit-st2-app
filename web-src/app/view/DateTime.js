// Generated by CoffeeScript 1.3.3

Ext.define("WSI.view.DateTime", {
  extend: "Ext.picker.Picker",
  xtype: "datetimepicker",
  alternateClassName: "Ext.ux.DateTimePicker",
  requires: ["Ext.DateExtras"],
  config: {
    /*
        @cfg {Number} yearFrom
        The start year for the date picker.
        @accessor
    */

    yearFrom: 1980,
    /*
        @cfg {Number} yearTo
        The last year for the date picker.
        @default the current year (new Date().getFullYear())
        @accessor
    */

    yearTo: new Date().getFullYear(),
    /*
        @cfg {String} monthText
        The label to show for the month column.
        @accessor
    */

    monthText: (Ext.os.deviceType.toLowerCase() === "phone" ? "M" : "Month"),
    /*
        @cfg {String} dayText
        The label to show for the day column.
        @accessor
    */

    dayText: (Ext.os.deviceType.toLowerCase() === "phone" ? "j" : "Day"),
    /*
        @cfg {String} yearText
        The label to show for the year column.
        @accessor
    */

    yearText: (Ext.os.deviceType.toLowerCase() === "phone" ? "Y" : "Year"),
    /*
        @cfg {String} hourText
        The label to show for the hour column. Defaults to 'Hour'.
    */

    hourText: (Ext.os.deviceType.toLowerCase() === "phone" ? "H" : "Hour"),
    /*
        @cfg {String} minuteText
        The label to show for the minute column. Defaults to 'Minute'.
    */

    minuteText: (Ext.os.deviceType.toLowerCase() === "phone" ? "i" : "Minute"),
    /*
        @cfg {String} ampmText
        The label to show for the ampm column. Defaults to 'AM/PM'.
    */

    ampmText: (Ext.os.deviceType.toLowerCase() === "phone" ? "A" : "AM/PM"),
    /*
        @cfg {Array} slotOrder
        An array of strings that specifies the order of the slots.
        @accessor
    */

    slotOrder: ["month", "day", "year", "hour", "minute", "ampm"],
    /*
        @cfg {Int} minuteInterval
        @accessor
    */

    minuteInterval: 15,
    /*
        @cfg {Boolean} ampm
        @accessor
    */

    ampm: false
  },
  /*
    @cfg {Object/Date} value
    Default value for the field and the internal {@link Ext.picker.Date} component. Accepts an object of 'year',
    'month' and 'day' values, all of which should be numbers, or a {@link Date}.
    
    Examples:
    {year: 1989, day: 1, month: 5} = 1st May 1989.
    new Date() = current date
    @accessor
  */

  /*
    @cfg {Boolean} useTitles
    Generate a title header for each individual slot and use
    the title configuration of the slot.
    @accessor
  */

  /*
    @cfg {Array} slots
    @hide
    @accessor
  */

  initialize: function() {
    this.callParent();
    return this.on({
      scope: this,
      delegate: "> slot",
      slotpick: this.onSlotPick
    });
  },
  setValue: function(value, animated) {
    var ampm, currentHours, hour;
    if (Ext.isDate(value)) {
      ampm = "AM";
      currentHours = hour = value.getHours();
      if (this.getAmpm()) {
        if (currentHours > 12) {
          ampm = "PM";
          hour -= 12;
        } else if (currentHours === 12) {
          ampm = "PM";
        } else {
          if (currentHours === 0) {
            hour = 12;
          }
        }
      }
      value = {
        day: value.getDate(),
        month: value.getMonth() + 1,
        year: value.getFullYear(),
        hour: hour,
        minute: value.getMinutes(),
        ampm: ampm
      };
    }
    return this.callParent([value, animated]);
  },
  getValue: function() {
    var day, daysInMonth, dayval, hour, hourval, i, item, items, ln, minute, minuteval, monthval, values, yearval;
    values = {};
    daysInMonth = void 0;
    day = void 0;
    hour = void 0;
    minute = void 0;
    items = this.getItems().items;
    ln = items.length;
    item = void 0;
    i = void 0;
    i = 0;
    while (i < ln) {
      item = items[i];
      if (item instanceof Ext.picker.Slot) {
        values[item.getName()] = item.getValue();
      }
      i++;
    }
    daysInMonth = this.getDaysInMonth(values.month, values.year);
    day = Math.min(values.day, daysInMonth);
    hour = values.hour;
    minute = values.minute;
    yearval = (isNaN(values.year) ? new Date().getFullYear() : values.year);
    monthval = (isNaN(values.month) ? new Date().getMonth() : values.month - 1);
    dayval = (isNaN(day) ? new Date().getDate() : day);
    hourval = (isNaN(hour) ? new Date().getHours() : hour);
    minuteval = (isNaN(minute) ? new Date().getMinutes() : minute);
    if (values.ampm && values.ampm === "PM" && hourval < 12) {
      hourval = hourval + 12;
    }
    if (values.ampm && values.ampm === "AM" && hourval === 12) {
      hourval = 0;
    }
    return new Date(yearval, monthval, dayval, hourval, minuteval);
  },
  /*
    Updates the yearFrom configuration
  */

  updateYearFrom: function() {
    if (this.initialized) {
      return this.createSlots();
    }
  },
  /*
    Updates the yearTo configuration
  */

  updateYearTo: function() {
    if (this.initialized) {
      return this.createSlots();
    }
  },
  /*
    Updates the monthText configuration
  */

  updateMonthText: function(newMonthText, oldMonthText) {
    var i, innerItems, item, ln, _results;
    innerItems = this.getInnerItems;
    ln = innerItems.length;
    item = void 0;
    i = void 0;
    if (this.initialized) {
      i = 0;
      _results = [];
      while (i < ln) {
        item = innerItems[i];
        if ((typeof item.title === "string" && item.title === oldMonthText) || (item.title.html === oldMonthText)) {
          item.setTitle(newMonthText);
        }
        _results.push(i++);
      }
      return _results;
    }
  },
  /*
    Updates the dayText configuraton
  */

  updateDayText: function(newDayText, oldDayText) {
    var i, innerItems, item, ln, _results;
    innerItems = this.getInnerItems;
    ln = innerItems.length;
    item = void 0;
    i = void 0;
    if (this.initialized) {
      i = 0;
      _results = [];
      while (i < ln) {
        item = innerItems[i];
        if ((typeof item.title === "string" && item.title === oldDayText) || (item.title.html === oldDayText)) {
          item.setTitle(newDayText);
        }
        _results.push(i++);
      }
      return _results;
    }
  },
  /*
    Updates the yearText configuration
  */

  updateYearText: function(yearText) {
    var i, innerItems, item, ln, _results;
    innerItems = this.getInnerItems;
    ln = innerItems.length;
    item = void 0;
    i = void 0;
    if (this.initialized) {
      i = 0;
      _results = [];
      while (i < ln) {
        item = innerItems[i];
        if (item.title === this.yearText) {
          item.setTitle(yearText);
        }
        _results.push(i++);
      }
      return _results;
    }
  },
  constructor: function() {
    this.callParent(arguments);
    return this.createSlots();
  },
  /*
    Generates all slots for all years specified by this component, and then sets them on the component
    @private
  */

  createSlots: function() {
    var ampm, days, daysInMonth, hourLimit, hourStart, hours, i, index, ln, me, minutes, months, slotOrder, slots, tmp, years, yearsFrom, yearsTo;
    me = this;
    slotOrder = this.getSlotOrder();
    yearsFrom = me.getYearFrom();
    yearsTo = me.getYearTo();
    years = [];
    days = [];
    months = [];
    hours = [];
    minutes = [];
    ampm = [];
    ln = void 0;
    tmp = void 0;
    i = void 0;
    daysInMonth = void 0;
    if (!this.getAmpm()) {
      index = slotOrder.indexOf("ampm");
      if (index >= 0) {
        slotOrder.splice(index);
      }
    }
    if (yearsFrom > yearsTo) {
      tmp = yearsFrom;
      yearsFrom = yearsTo;
      yearsTo = tmp;
    }
    i = yearsFrom;
    while (i <= yearsTo) {
      years.push({
        text: i,
        value: i
      });
      i++;
    }
    daysInMonth = this.getDaysInMonth(1, new Date().getFullYear());
    i = 0;
    while (i < daysInMonth) {
      days.push({
        text: i + 1,
        value: i + 1
      });
      i++;
    }
    i = 0;
    ln = Ext.Date.monthNames.length;
    while (i < ln) {
      months.push({
        text: (Ext.os.deviceType.toLowerCase() === "phone" ? Ext.Date.monthNames[i].substring(0, 3) : Ext.Date.monthNames[i]),
        value: i + 1
      });
      i++;
    }
    hourLimit = (this.getAmpm() ? 12 : 23);
    hourStart = (this.getAmpm() ? 1 : 0);
    i = hourStart;
    while (i <= hourLimit) {
      hours.push({
        text: this.pad2(i),
        value: i
      });
      i++;
    }
    i = 0;
    while (i < 60) {
      minutes.push({
        text: this.pad2(i),
        value: i
      });
      i += this.getMinuteInterval();
    }
    ampm.push({
      text: "AM",
      value: "AM"
    }, {
      text: "PM",
      value: "PM"
    });
    slots = [];
    slotOrder.forEach((function(item) {
      return slots.push(this.createSlot(item, days, months, years, hours, minutes, ampm));
    }), this);
    return me.setSlots(slots);
  },
  /*
    Returns a slot config for a specified date.
    @private
  */

  createSlot: function(name, days, months, years, hours, minutes, ampm) {
    switch (name) {
      case "year":
        return {
          name: "year",
          align: (Ext.os.deviceType.toLowerCase() === "phone" ? "left" : "center"),
          data: years,
          title: this.getYearText(),
          flex: (Ext.os.deviceType.toLowerCase() === "phone" ? 1.3 : 3)
        };
      case "month":
        return {
          name: name,
          align: (Ext.os.deviceType.toLowerCase() === "phone" ? "left" : "right"),
          data: months,
          title: this.getMonthText(),
          flex: (Ext.os.deviceType.toLowerCase() === "phone" ? 1.2 : 4)
        };
      case "day":
        return {
          name: "day",
          align: (Ext.os.deviceType.toLowerCase() === "phone" ? "left" : "center"),
          data: days,
          title: this.getDayText(),
          flex: (Ext.os.deviceType.toLowerCase() === "phone" ? 0.9 : 2)
        };
      case "hour":
        return {
          name: "hour",
          align: (Ext.os.deviceType.toLowerCase() === "phone" ? "left" : "center"),
          data: hours,
          title: this.getHourText(),
          flex: (Ext.os.deviceType.toLowerCase() === "phone" ? 0.9 : 2)
        };
      case "minute":
        return {
          name: "minute",
          align: (Ext.os.deviceType.toLowerCase() === "phone" ? "left" : "center"),
          data: minutes,
          title: this.getMinuteText(),
          flex: (Ext.os.deviceType.toLowerCase() === "phone" ? 0.9 : 2)
        };
      case "ampm":
        return {
          name: "ampm",
          align: (Ext.os.deviceType.toLowerCase() === "phone" ? "left" : "center"),
          data: ampm,
          title: this.getAmpmText(),
          flex: (Ext.os.deviceType.toLowerCase() === "phone" ? 1.1 : 2)
        };
    }
  },
  onSlotPick: function(pickedSlot, oldValue, htmlNode, eOpts) {
    var pickedValue;
    pickedValue = pickedSlot.getStore().getAt(pickedSlot.selectedIndex).get(pickedSlot.getValueField());
    pickedSlot.setValue(pickedValue);
    if (pickedSlot.getName() === "month" || pickedSlot.getName() === "year") {
      return this.repopulateDaySlot();
    }
  },
  repopulateDaySlot: function() {
    var days, daysInMonth, i, month, slot, year;
    slot = this.getDaySlot();
    days = [];
    month = this.getSlotByName("month").getValue();
    year = this.getSlotByName("year").getValue();
    daysInMonth = void 0;
    daysInMonth = this.getDaysInMonth(month, year);
    i = 0;
    while (i < daysInMonth) {
      days.push({
        text: i + 1,
        value: i + 1
      });
      i++;
    }
    if (slot.getData().length === days.length) {
      return;
    }
    return slot.setData(days);
  },
  getSlotByName: function(name) {
    return this.down("pickerslot[name=" + name + "]");
  },
  getDaySlot: function() {
    return this.getSlotByName("day");
  },
  getDaysInMonth: function(month, year) {
    var daysInMonth;
    daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    if (month === 2 && this.isLeapYear(year)) {
      return 29;
    } else {
      return daysInMonth[month - 1];
    }
  },
  isLeapYear: function(year) {
    return !!((year & 3) === 0 && (year % 100 || (year % 400 === 0 && year)));
  },
  pad2: function(number) {
    return (number < 10 ? "0" : "") + number;
  }
});
