// Generated by CoffeeScript 1.3.3

Ext.define('WSI.view.EventDetailsContainer', {
  extend: 'Ext.Container',
  xtype: 'eventdetailscontainer',
  id: 'eventdetailscontainer',
  requires: ['WSI.view.MediaWall'],
  config: {
    layout: 'vbox',
    scrollable: {
      direction: 'vertical',
      directionLock: true,
      indicators: false,
      momentumEasing: {
        momentum: {
          acceleration: 15,
          friction: 0.99
        }
      }
    },
    eid: null,
    eventRecord: null
  },
  initialize: function() {
    this.callParent(arguments);
    this.yPivotPoint = 0;
    this.scrollDirDown = true;
    this.lastY = 0;
    this.lastYCheck = 0;
    this.mediaPageBusy = false;
    this.lastYLoadImages = 0;
    this.mediaPage = 1;
    this.mediaPageHeight = 5000;
    this.minItemHeight = 80;
    this.maxItemHeight = 200;
    this.maxItemsPerRow = 3;
    this.mediasPerPage = Math.floor((this.mediaPageHeight / this.minItemHeight) * this.maxItemsPerRow);
    this.dataSrcs = {};
    this.flipbookIntervals = {};
    this.isLightboxMode = false;
    return this.getScrollable().getScroller().on({
      scrollend: this.onScrollEnd,
      scroll: this.onScroll,
      scope: this
    });
  },
  destroy: function() {
    var i, item, _ref;
    _ref = this.flipbookIntervals;
    for (i in _ref) {
      item = _ref[i];
      clearInterval(item.interval);
    }
    this.flipbookIntervals = {};
    return this.callParent(arguments);
  },
  onScroll: function(scroller, x, y) {
    var pullRefresh;
    pullRefresh = this.getAt(0);
    if (scroller.isTouching) {
      if (y < -75) {
        pullRefresh.addCls("x-list-pullrefresh-release");
        this.refreshOnLetGo = true;
      } else {
        pullRefresh.removeCls("x-list-pullrefresh-release");
        this.refreshOnLetGo = false;
      }
    }
    return true;
  },
  onScrollEnd: function(scroller, x, y) {
    if (this.refreshOnLetGo) {
      this.refreshOnLetGo = false;
      Ext.Viewport.setMasked({
        xtype: 'loadmask',
        message: ''
      });
      this.fireEvent('refreshForEventDetails');
    } else {
      if (!this.mediaPageBusy && Math.abs(this.lastYCheck - y) > 100) {
        this.lastYCheck = y;
        if (scroller.position.y > scroller.maxPosition.y - 150 && this.media.length < this.getEventRecord().get('num_of_photos') + this.getEventRecord().get('num_of_videos')) {
          this.loadPage(y);
        }
      }
      if (!scroller.isTouching && Math.abs(this.lastYLoadImages - y) > this.minItemHeight) {
        this.loadImages(y);
      }
    }
    return true;
  },
  loadImages: function(y) {
    var bottomBound, i, midKey, stepper, thumb, thumbs, topBound, _base, _ref, _ref1, _results,
      _this = this;
    thumbs = (_ref = this.getAt(2)) != null ? _ref.thumbs : void 0;
    if (thumbs != null) {
      this.lastYLoadImages = y;
      topBound = (y - this.maxItemHeight) - 50;
      bottomBound = y + this.scrollerContainerHeight + 500;
      _results = [];
      for (i in thumbs) {
        thumb = thumbs[i];
        midKey = "mid" + (thumb.getAttribute('data-mid'));
        if (thumb.offsetTop > topBound && thumb.offsetTop < bottomBound) {
          if (thumb.classList.contains('flipbook')) {
            if (!(this.flipbookIntervals[midKey] != null) && Object.keys(this.flipbookIntervals).length < 3) {
              stepper = (function(i, midKey) {
                return function() {
                  return _this.flipbookStep(i, midKey);
                };
              })(i, midKey);
              _results.push(this.flipbookIntervals[midKey] = {
                interval: setInterval(stepper, 600)
              });
            } else {
              _results.push(void 0);
            }
          } else {
            if (thumb.style.backgroundImage === '') {
              if ((_ref1 = (_base = this.dataSrcs)[midKey]) == null) {
                _base[midKey] = thumb.getAttribute('data-src');
              }
              _results.push(thumb.style.backgroundImage = "url(" + this.dataSrcs[midKey] + ")");
            } else {
              _results.push(void 0);
            }
          }
        } else {
          if (thumb.classList.contains('flipbook')) {
            if (this.flipbookIntervals[midKey] != null) {
              clearInterval(this.flipbookIntervals[midKey].interval);
              delete this.flipbookIntervals[midKey].interval;
              _results.push(delete this.flipbookIntervals[midKey]);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    }
  },
  loadPage: function(y) {
    this.mediaPageBusy = true;
    this.getAt(3).setHidden(false);
    return Ext.defer((function() {
      return Ext.Ajax.request({
        url: 'http://wesawit.com/event/get_media_page',
        params: {
          token: window.localStorage.getItem('wsitoken'),
          uid: window.localStorage.getItem('uid'),
          eid: this.getEventRecord().get('id'),
          start: this.media.length,
          limit: 100
        },
        timeout: 30000,
        method: 'GET',
        scope: this,
        success: function(response) {
          var arr, i, r, _i, _len, _ref;
          r = Ext.JSON.decode(response.responseText);
          _ref = r.medias;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            i.status = 'loaded';
            i.event_id = i.aeid;
            arr = i.timestampTaken.split(/[- :\.]/);
            i.timestampTaken = new Date();
            i.timestampTaken.setUTCFullYear(parseInt(arr[0]));
            i.timestampTaken.setUTCMonth(parseInt(arr[1]) - 1);
            i.timestampTaken.setUTCDate(parseInt(arr[2]));
            i.timestampTaken.setUTCHours(parseInt(arr[3]));
            i.timestampTaken.setUTCMinutes(parseInt(arr[4]));
            i.timestampTaken.setUTCSeconds(parseInt(arr[5]));
            if (i.pid != null) {
              i.url = null;
              i.mediumUrl = null;
              if (i.thumbUrl !== '') {
                i.url = i.thumbUrl.slice(0, -5) + '7.jpg';
                i.mediumUrl = i.thumbUrl.slice(0, -5) + '6.jpg';
              } else {
                i.url = null;
                i.mediumUrl = null;
                i.thumbUrl = null;
              }
            }
            this.media.push(i);
          }
          this.getAt(2).getStore().setData(this.media);
          this.getAt(3).setHidden(true);
          return this.mediaPageBusy = false;
        },
        failure: function() {
          return this.getAt(3).setHidden(true);
        }
      });
    }), 50, this);
  },
  flipbookStep: function(i, midKey) {
    var nextPageToShow, p, pages, thumb, _ref, _ref1;
    thumb = (_ref = this.getAt(2)) != null ? (_ref1 = _ref.thumbs) != null ? _ref1[i] : void 0 : void 0;
    if (thumb != null) {
      pages = thumb.getElementsByTagName('IMG');
      nextPageToShow = 0;
      for (p in pages) {
        if (pages[p].classList.contains('show')) {
          pages[p].classList.remove('show');
          nextPageToShow = parseInt(p) + 1;
          if (nextPageToShow > pages.length - 1) {
            nextPageToShow = 0;
          }
          if (pages[nextPageToShow].complete === false) {
            nextPageToShow = 0;
          }
          break;
        }
      }
      if (nextPageToShow < pages.length - 1) {
        if (pages[nextPageToShow + 1].src.indexOf('#') !== -1) {
          pages[nextPageToShow + 1].src = pages[nextPageToShow + 1].getAttribute('data-src');
        }
      }
      return pages[nextPageToShow].classList.add('show');
    }
  },
  changeEvent: function(record, scrollToTop) {
    var distance, m, meanWorthiness, media, mediaWall, numWhosThere, pullRefresh, tenseToBe, wcCount, wcSum, _ref;
    if (scrollToTop == null) {
      scrollToTop = true;
    }
    this.setEventRecord(record);
    this.media = record.get('photos').concat(record.get('videos'));
    this.media = this.media.sort(function(x, y) {
      return y.timestampTaken - x.timestampTaken;
    });
    meanWorthiness = 0;
    wcSum = 0;
    wcCount = 0;
    _ref = this.media;
    for (m in _ref) {
      media = _ref[m];
      wcSum += parseInt(media.worthinessCount);
      wcCount++;
    }
    meanWorthiness = wcSum / wcCount;
    mediaWall = {
      xtype: 'mediawall',
      id: 'mediawall',
      flex: 0,
      margin: 0,
      padding: '5 0 50 5',
      flipbookIntervalArrayRef: this.flipbookIntervals,
      store: {
        data: this.media,
        model: 'WSI.model.Media'
      },
      emptyText: record.get('photos').length + record.get('videos').length === 0 ? ["<div class='empty-text' style='text-align: center'>", "No photos or videos have been added yet.", "<br /><br />Be the first to upload what you see!", "</div>"].join('') : void 0,
      meanWorthiness: meanWorthiness,
      listeners: {
        refresh: function(c) {
          var edc;
          edc = c.up();
          edc.scrollerContainerHeight = edc.getScrollable().getScroller().container.dom.clientHeight;
          c.thumbs = c.bodyElement.query('.media-item');
          return Ext.defer((function() {
            edc.loadImages(edc.getScrollable().getScroller().position.y);
            return edc.setMasked(false);
          }), 50);
        }
      }
    };
    numWhosThere = record.get('num_whosthere');
    tenseToBe = util.getTenseOfToBe(record.get('dateTimeStart'), record.get('dateTimeEnd'), numWhosThere === 1);
    pullRefresh = {
      xtype: 'component',
      snappingAnimationDuration: 150,
      translatable: true,
      isRefreshing: false,
      currentViewState: "",
      html: ['<div class="x-list-pullrefresh">', '<div class="x-list-pullrefresh-wrap">', '<img src="resources/images/tarsier.png" width="45" height="24" />', '</div>', '</div>', "<div class='x-list-emptytext' style='display:none;'></div>"].join(''),
      refreshFn: function(plugin) {
        if (!navigator.onLine) {
          navigator.notification.alert('Unable to connect to the internet.', (function() {}), 'Oops!');
        } else {
          Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: ''
          });
          plugin.up().fireEvent('refreshForEventDetails');
        }
        return false;
      }
    };
    return this.add([
      pullRefresh, {
        xtype: 'container',
        baseCls: 'event-details',
        cls: ['hide-description'],
        layout: 'vbox',
        scrollable: false,
        flex: 0,
        items: [
          {
            xtype: 'component',
            flex: 0,
            style: 'font-family: GillSans, HelveticaNeue, Helvetica;',
            html: ["<span class='event-fact event-fact-date'>" + (Ext.util.Format.date(record.get('dateTimeStart'), 'j M Y')) + "</span>", "<span class='event-fact event-fact-time'>" + (Ext.util.Format.date(record.get('dateTimeStart'), 'g:i a')) + "</span>", "<span class='event-fact event-fact-info'>Info</span>", "<div class='event-details-description' style='clear: left;'>", record.get('description') !== '' ? record.get('description') : void 0, record.get('description') !== '' && record.get('category') !== '' ? "<br />" : void 0, record.get('category') !== '' ? "<small>Category: " + record.get('category') + "</small>" : void 0, record.get('description') === '' && record.get('category') === '' ? '<span style="font-style:italic;">No description available.</span>' : void 0, "</div>", "<span class='event-fact event-fact-location' style='clear: left;'>" + ((distance = window.util.calc_distance(record.get('locationLat'), record.get('locationLng'))) ? distance : "") + " " + (record.get('locationName') + ', ' + record.get('locationVicinity')) + "</span>"].join(''),
            listeners: {
              tap: {
                element: 'element',
                fn: function(e) {
                  var mapsFn,
                    _this = this;
                  if (e.target.classList.contains('event-fact-info')) {
                    if (this.up().element.classList.indexOf('hide-description') !== -1) {
                      return this.up().removeCls('hide-description');
                    } else {
                      return this.up().addCls('hide-description');
                    }
                  } else if (e.target.classList.contains('event-fact-location')) {
                    mapsFn = function(buttonIndex) {
                      if (buttonIndex === 2) {
                        if (Ext.os.is.Android) {
                          return window.location = 'geo:0,0?q=' + encodeURIComponent(record.get('locationName') + ', ' + record.get('locationVicinity'));
                        } else {
                          return window.location = 'maps:q=' + record.get('locationLat') + ',' + record.get('locationLng');
                        }
                      }
                    };
                    return navigator.notification.confirm('View event location in Maps app?', mapsFn, 'Leaving WeSawIt', 'No,Yes');
                  }
                }
              }
            }
          }, {
            xtype: 'container',
            flex: 0,
            padding: 5,
            layout: 'hbox',
            pack: 'center',
            align: 'center',
            items: [
              {
                xtype: 'container',
                layout: 'vbox',
                flex: 0,
                margin: '0 15 0 -5',
                html: '<div class="form-group-toggle upload">Upload</div>',
                listeners: {
                  tap: {
                    element: 'element',
                    fn: function(e) {
                      return this.up().up().up().fireEvent('mediaLibraryButtonTap', true);
                    }
                  }
                }
              }, {
                xtype: 'container',
                layout: 'vbox',
                flex: 1,
                margin: '0 -5 0 0',
                html: "<div class='form-group-toggle who" + (numWhosThere > 999 ? ' long-text' : '') + "'>" + (tenseToBe != null ? util.commaize_number(numWhosThere) + ' ' + tenseToBe + ' there' : 'Who\'s there?') + "</div>",
                listeners: {
                  tap: {
                    element: 'element',
                    fn: function(e) {
                      return this.up().up().up().fireEvent('whosThereButtonTap', record);
                    }
                  }
                }
              }
            ]
          }
        ]
      }, mediaWall, {
        xtype: 'component',
        baseCls: Ext.baseCSSPrefix + 'list-paging',
        hidden: true,
        html: "<div class=\"" + Ext.baseCSSPrefix + "loading-spinner\" style=\"top: -40px; margin: 0px auto; display: block;\">\n  <span class=\"" + Ext.baseCSSPrefix + "loading-top\"></span>\n  <span class=\"" + Ext.baseCSSPrefix + "loading-right\"></span>\n  <span class=\"" + Ext.baseCSSPrefix + "loading-bottom\"></span>\n  <span class=\"" + Ext.baseCSSPrefix + "loading-left\"></span>\n</div>"
      }
    ]);
  }
});
