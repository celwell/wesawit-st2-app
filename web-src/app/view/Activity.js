// Generated by CoffeeScript 1.3.3

Ext.define('WSI.view.Activity', {
  extend: 'Ext.Container',
  xtype: 'activity',
  requires: ['WSI.model.Media', 'Ext.SegmentedButton'],
  config: {
    scrollable: false,
    layout: 'vbox',
    margin: '0 5 0 5',
    padding: 0
  },
  initialize: function() {
    this.callParent(arguments);
    return this.populateWithProperItems();
  },
  populateWithProperItems: function() {
    var activityListsContainer;
    this.add({
      xtype: "segmentedbutton",
      baseCls: 'activity-segmented-button',
      flex: 0,
      height: 38,
      zIndex: 1000,
      items: [
        {
          mediaType: 'events',
          iconCls: 'list',
          iconMask: true,
          pressed: true,
          text: ' ',
          flex: 1,
          height: 38
        }, {
          mediaType: 'photos',
          iconCls: 'photo_black2',
          iconMask: true,
          text: ' ',
          flex: 1,
          height: 38
        }, {
          mediaType: 'videos',
          iconCls: 'video_black2',
          iconMask: true,
          text: ' ',
          flex: 1,
          height: 38
        }
      ],
      listeners: {
        toggle: function(container, button, pressed) {
          return this.onContributionsMediaTypeChange(button.config.mediaType);
        },
        scope: this
      }
    });
    activityListsContainer = {
      xtype: 'container',
      layout: 'vbox',
      flex: 1,
      zIndex: 999,
      items: [
        {
          xtype: 'list',
          cls: ['activity-list', 'fluid'],
          width: '100%',
          padding: 0,
          margin: 0,
          flex: 1,
          scrollable: {
            direction: 'vertical',
            indicators: false,
            directionLock: true,
            momentumEasing: {
              momentum: {
                acceleration: 10,
                friction: 0.95
              },
              bounce: {
                acceleration: 30,
                springTension: 0.3
              }
            }
          },
          disableSelection: true,
          loadingText: "",
          emptyText: "",
          store: {
            model: 'WSI.model.Event',
            proxy: {
              type: 'ajax',
              url: 'http://wesawit.com/event/get_events_mobile',
              extraParams: {
                'token': window.localStorage.getItem('wsitoken'),
                'uid': window.localStorage.getItem('uid'),
                sort: 'top',
                category: 'all',
                country: 'world',
                dateTimeStart: '1950-01-01T00:00:00Z',
                dateTimeEnd: '2025-12-31T23:59:59Z',
                searchTerm: 'user:' + window.localStorage.getItem('uid'),
                includeExternalSources: 1
              },
              reader: {
                type: 'json',
                rootProperty: 'events'
              }
            },
            pageSize: 10,
            autoLoad: true
          },
          plugins: [
            {
              xclass: 'WSI.plugin.BetterPullRefresh',
              pullRefreshText: 'pull down to refresh',
              releaseRefreshText: 'release to refresh',
              loadingText: 'loading events...',
              pullTpl: ['<div class="x-list-pullrefresh">', '<div class="x-list-pullrefresh-wrap">', '<img src="resources/images/tarsier.png" width="45" height="24" />', '<h3 class="x-list-pullrefresh-message" style="display:none">{message}</h3>', '<div class="x-list-pullrefresh-updated" style="display:none">last updated: <span>{lastUpdated:date("m/d/Y h:iA")}</span></div>', '</div>', '</div>', "<div class='x-list-emptytext' style='display:none;'>{[(navigator.onLine ? 'you have not created any events' : 'unable to connect to internet<br />pull down to refresh')]}</div>"].join(''),
              refreshFn: function(plugin) {
                var refresher, store, task;
                if (!navigator.onLine) {
                  navigator.notification.alert('Unable to connect to the internet.', (function() {}), 'Oops!');
                } else {
                  store = plugin.up().up().getStore();
                  refresher = function() {
                    store.currentPage = 1;
                    return store.load();
                  };
                  if (!(window.localStorage.getItem('locationTimestamp') != null) || (new Date()) - new Date(window.localStorage.getItem('locationTimestamp')) > 30000) {
                    plugin.up().up().fireEvent('grabCurrentPosition');
                    task = Ext.create('Ext.util.DelayedTask', refresher);
                    task.delay(500);
                  } else {
                    refresher();
                  }
                }
                return false;
              }
            }, {
              xclass: 'Ext.plugin.ListPaging',
              autoPaging: true,
              noMoreRecordsText: "",
              loadMoreText: ''
            }
          ],
          itemTpl: Ext.create('Ext.XTemplate', "<div class='delete'></div>", '{title}', '<span class="sub-info">', '<br />{[window.util.commaize_number(values.viewCount)]} views', "<br />{dateTimeStart:date('j M Y')} at {dateTimeStart:date('g:i a')}", '</span>'),
          listeners: {
            refresh: function(c) {
              return Ext.defer(function() {
                var _ref, _ref1, _ref2;
                if (((_ref = c.getPlugins()[0]) != null ? (_ref1 = _ref.element) != null ? (_ref2 = _ref1.dom) != null ? _ref2.childNodes[1] : void 0 : void 0 : void 0) != null) {
                  if (c.getStore().isLoaded() && c.getStore().getCount() === 0) {
                    return c.getPlugins()[0].element.dom.childNodes[1].style.display = 'block';
                  } else {
                    return c.getPlugins()[0].element.dom.childNodes[1].style.display = 'none';
                  }
                }
              }, 100);
            },
            activate: function(c) {
              return c.getStore().getProxy().config.extraParams.searchTerm = 'user:' + window.localStorage.getItem('uid');
            },
            itemtap: function(list, index, target, record, e, eOpts) {
              var deleteFn,
                _this = this;
              if (e.target.className === 'delete') {
                if (record.get('viewCount') < 301) {
                  deleteFn = function(buttonIndex) {
                    if (buttonIndex === 2) {
                      return _this.fireEvent('deleteRecord', 'event', record, list);
                    }
                  };
                  return navigator.notification.confirm(record.get('title'), deleteFn, 'Delete this event?', 'No,Yes');
                } else {
                  return navigator.notification.alert('You cannot delete an event that has more than 300 views.', (function() {}), 'Oops!');
                }
              } else {
                return this.fireEvent('viewEventCommand', list, record);
              }
            },
            scope: this
          }
        }, {
          xtype: 'list',
          cls: ['activity-list'],
          width: '100%',
          padding: 0,
          margin: 0,
          flex: 1,
          itemHeight: 100,
          refreshHeightOnUpdate: false,
          variableHeights: false,
          disableSelection: false,
          scrollable: {
            indicators: false,
            directionLock: true,
            direction: 'vertical',
            momentumEasing: {
              momentum: {
                acceleration: 10,
                friction: 0.95
              },
              bounce: {
                acceleration: 30,
                springTension: 0.3
              }
            }
          },
          loadingText: "",
          emptyText: "",
          hidden: true,
          store: {
            model: 'WSI.model.Media',
            proxy: {
              type: 'ajax',
              url: 'http://wesawit.com/event/get_photos/0/' + encodeURIComponent(window.localStorage.getItem('uid')),
              reader: {
                type: 'json',
                rootProperty: 'photos'
              }
            },
            pageSize: 8
          },
          plugins: [
            {
              xclass: 'WSI.plugin.BetterPullRefresh',
              pullRefreshText: 'pull down to refresh',
              releaseRefreshText: 'release to refresh',
              loadingText: 'loading photos...',
              pullTpl: ['<div class="x-list-pullrefresh">', '<div class="x-list-pullrefresh-wrap">', '<img src="resources/images/tarsier.png" width="45" height="24" />', '<h3 class="x-list-pullrefresh-message" style="display:none">{message}</h3>', '<div class="x-list-pullrefresh-updated" style="display:none">last updated: <span>{lastUpdated:date("m/d/Y h:iA")}</span></div>', '</div>', '</div>', "<div class='x-list-emptytext' style='display:none;'>{[(navigator.onLine ? 'you have not uploaded any photos' : 'unable to connect to internet<br />pull down to refresh')]}</div>"].join(''),
              refreshFn: function(plugin) {
                var refresher, store, task;
                if (!navigator.onLine) {
                  navigator.notification.alert('Unable to connect to the internet.', (function() {}), 'Oops!');
                } else {
                  store = plugin.up().up().getStore();
                  refresher = function() {
                    store.currentPage = 1;
                    return store.load();
                  };
                  if (!(window.localStorage.getItem('locationTimestamp') != null) || (new Date()) - new Date(window.localStorage.getItem('locationTimestamp')) > 30000) {
                    plugin.up().up().fireEvent('grabCurrentPosition');
                    task = Ext.create('Ext.util.DelayedTask', refresher);
                    task.delay(500);
                  } else {
                    refresher();
                  }
                }
                return false;
              }
            }, {
              xclass: 'Ext.plugin.ListPaging',
              autoPaging: true,
              noMoreRecordsText: "",
              loadMoreText: ''
            }
          ],
          itemTpl: Ext.create('Ext.XTemplate', "<div class='media-item thumb' style='width: 155px; height: 100px; float: left; background-image: url({[util.image_url(values, 'small')]}); background-size: cover; background-position: center;'></div>", "<div class='right-side'>", "<div class='delete'></div>", "<span class='sub-info'>", "{[window.util.commaize_number(values.worthinessCount)]} like{[(values.worthinessCount != 1 ? 's' : '')]}", "<br />{timestampTaken:date('j M Y')}", "<br />{timestampTaken:date('g:i a')}", "</span>", "</div>"),
          listeners: {
            refresh: function(c) {
              return Ext.defer(function() {
                var _ref, _ref1, _ref2;
                if (((_ref = c.getPlugins()[0]) != null ? (_ref1 = _ref.element) != null ? (_ref2 = _ref1.dom) != null ? _ref2.childNodes[1] : void 0 : void 0 : void 0) != null) {
                  if (c.getStore().isLoaded() && c.getStore().getCount() === 0) {
                    return c.getPlugins()[0].element.dom.childNodes[1].style.display = 'block';
                  } else {
                    return c.getPlugins()[0].element.dom.childNodes[1].style.display = 'none';
                  }
                }
              }, 100);
            },
            itemtap: function(list, index, target, record, e, eOpts) {
              var deleteFn, eid,
                _this = this;
              if (e.target.className === 'delete') {
                if (record.get('worthinessCount') < 11) {
                  deleteFn = function(buttonIndex) {
                    if (buttonIndex === 2) {
                      return _this.fireEvent('deleteRecord', 'photo', record, list);
                    }
                  };
                  return navigator.notification.confirm('Delete this photo?', deleteFn, 'Delete?', 'No,Yes');
                } else {
                  return navigator.notification.alert('You cannot delete a photo that has more than 10 likes.', (function() {}), 'Oops!');
                }
              } else {
                eid = record.get('event_id');
                if (Ext.getStore('EventsCurrent').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsCurrent').getById(eid));
                } else if (Ext.getStore('EventsPast').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsPast').getById(eid));
                } else if (Ext.getStore('EventsFuture').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsFuture').getById(eid));
                } else if (Ext.getStore('EventsSearch').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsSearch').getById(eid));
                } else {
                  return Ext.Ajax.request({
                    url: "http://wesawit.com/event/view/" + eid + "/1",
                    method: 'GET',
                    scope: this,
                    success: function(response) {
                      var eventRecord, obj;
                      obj = Ext.decode(response.responseText);
                      if ((obj.event_data != null) && obj.event_data !== false) {
                        eventRecord = Ext.create('WSI.model.Event', obj.event_data);
                        return this.fireEvent('viewEventCommand', null, eventRecord);
                      } else {
                        return navigator.notification.alert('The event that this was for has been deleted.', (function() {}), 'Oops!');
                      }
                    },
                    failure: function() {
                      return navigator.notification.alert('The event that this was for has been deleted.', (function() {}), 'Oops!');
                    }
                  });
                }
              }
            },
            scope: this
          }
        }, {
          xtype: 'list',
          cls: ['activity-list'],
          hidden: true,
          width: '100%',
          padding: 0,
          margin: 0,
          flex: 1,
          itemHeight: 100,
          refreshHeightOnUpdate: false,
          variableHeights: false,
          disableSelection: false,
          scrollable: {
            indicators: false,
            directionLock: true,
            direction: 'vertical',
            momentumEasing: {
              momentum: {
                acceleration: 10,
                friction: 0.95
              },
              bounce: {
                acceleration: 30,
                springTension: 0.3
              }
            }
          },
          loadingText: "",
          emptyText: "",
          store: {
            model: 'WSI.model.Media',
            proxy: {
              type: 'ajax',
              url: 'http://wesawit.com/event/get_videos/0/' + encodeURIComponent(window.localStorage.getItem('uid')),
              reader: {
                type: 'json',
                rootProperty: 'videos'
              }
            },
            pageSize: 8
          },
          plugins: [
            {
              xclass: 'WSI.plugin.BetterPullRefresh',
              pullRefreshText: 'pull down to refresh',
              releaseRefreshText: 'release to refresh',
              loadingText: 'loading videos...',
              pullTpl: ['<div class="x-list-pullrefresh">', '<div class="x-list-pullrefresh-wrap">', '<img src="resources/images/tarsier.png" width="45" height="24" />', '<h3 class="x-list-pullrefresh-message" style="display:none">{message}</h3>', '<div class="x-list-pullrefresh-updated" style="display:none">last updated: <span>{lastUpdated:date("m/d/Y h:iA")}</span></div>', '</div>', '</div>', "<div class='x-list-emptytext' style='display:none;'>{[(navigator.onLine ? 'you have not uploaded any videos' : 'unable to connect to internet<br />pull down to refresh')]}</div>"].join(''),
              refreshFn: function(plugin) {
                var refresher, store, task;
                if (!navigator.onLine) {
                  navigator.notification.alert('Unable to connect to the internet.', (function() {}), 'Oops!');
                } else {
                  store = plugin.up().up().getStore();
                  refresher = function() {
                    store.currentPage = 1;
                    return store.load();
                  };
                  if (!(window.localStorage.getItem('locationTimestamp') != null) || (new Date()) - new Date(window.localStorage.getItem('locationTimestamp')) > 30000) {
                    plugin.up().up().fireEvent('grabCurrentPosition');
                    task = Ext.create('Ext.util.DelayedTask', refresher);
                    task.delay(500);
                  } else {
                    refresher();
                  }
                }
                return false;
              }
            }, {
              xclass: 'Ext.plugin.ListPaging',
              autoPaging: true,
              noMoreRecordsText: "",
              loadMoreText: ''
            }
          ],
          itemTpl: Ext.create('Ext.XTemplate', "<div class='media-item thumb' style='width: 155px; height: 100px; float: left; background-image: url({[util.image_url(values, 'small')]}); background-size: cover; background-position: center;'></div>", "<div class='right-side'>", "<div class='delete'></div>", "<span class='sub-info'>", "{[window.util.commaize_number(values.worthinessCount)]} like{[(values.worthinessCount != 1 ? 's' : '')]}", "<br />{timestampTaken:date('j M Y')}", "<br />{timestampTaken:date('g:i a')}", "</span>", "</div>", window.util),
          listeners: {
            refresh: function(c) {
              return Ext.defer(function() {
                var _ref, _ref1, _ref2;
                if (((_ref = c.getPlugins()[0]) != null ? (_ref1 = _ref.element) != null ? (_ref2 = _ref1.dom) != null ? _ref2.childNodes[1] : void 0 : void 0 : void 0) != null) {
                  if (c.getStore().isLoaded() && c.getStore().getCount() === 0) {
                    return c.getPlugins()[0].element.dom.childNodes[1].style.display = 'block';
                  } else {
                    return c.getPlugins()[0].element.dom.childNodes[1].style.display = 'none';
                  }
                }
              }, 100);
            },
            itemtap: function(list, index, target, record, e, eOpts) {
              var deleteFn, eid,
                _this = this;
              if (e.target.className === 'delete') {
                if (record.get('worthinessCount') < 11) {
                  deleteFn = function(buttonIndex) {
                    if (buttonIndex === 2) {
                      return _this.fireEvent('deleteRecord', 'video', record, list);
                    }
                  };
                  return navigator.notification.confirm('Delete this video?', deleteFn, 'Delete?', 'No,Yes');
                } else {
                  return navigator.notification.alert('You cannot delete a video that has more than 10 likes.', (function() {}), 'Oops!');
                }
              } else {
                eid = record.get('event_id');
                if (Ext.getStore('EventsCurrent').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsCurrent').getById(eid));
                } else if (Ext.getStore('EventsPast').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsPast').getById(eid));
                } else if (Ext.getStore('EventsFuture').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsFuture').getById(eid));
                } else if (Ext.getStore('EventsSearch').getById(eid) != null) {
                  return this.fireEvent('viewEventCommand', null, Ext.getStore('EventsSearch').getById(eid));
                } else {
                  return Ext.Ajax.request({
                    url: "http://wesawit.com/event/view/" + eid + "/1",
                    method: 'GET',
                    scope: this,
                    success: function(response) {
                      var eventRecord, obj;
                      obj = Ext.decode(response.responseText);
                      if ((obj.event_data != null) && obj.event_data !== false) {
                        eventRecord = Ext.create('WSI.model.Event', obj.event_data);
                        return this.fireEvent('viewEventCommand', null, eventRecord);
                      } else {
                        return navigator.notification.alert('The event that this was for has been deleted.', (function() {}), 'Oops!');
                      }
                    },
                    failure: function() {
                      return navigator.notification.alert('The event that this was for has been deleted.', (function() {}), 'Oops!');
                    }
                  });
                }
              }
            },
            scope: this
          }
        }
      ]
    };
    return this.add(activityListsContainer);
  },
  onContributionsMediaTypeChange: function(mediaType) {
    if (mediaType !== 'events') {
      this.getAt(1).getAt(0).hide();
    }
    if (mediaType !== 'photos') {
      this.getAt(1).getAt(1).hide();
    }
    if (mediaType !== 'videos') {
      this.getAt(1).getAt(2).hide();
    }
    switch (mediaType) {
      case 'events':
        this.getAt(1).getAt(0).getStore().loadPage(1);
        return this.getAt(1).getAt(0).show();
      case 'photos':
        this.getAt(1).getAt(1).getStore().getProxy().config.url = 'http://wesawit.com/event/get_photos/0/' + encodeURIComponent(window.localStorage.getItem('uid'));
        this.getAt(1).getAt(1).getStore().loadPage(1);
        return this.getAt(1).getAt(1).show();
      case 'videos':
        this.getAt(1).getAt(2).getStore().getProxy().config.url = 'http://wesawit.com/event/get_videos/0/' + encodeURIComponent(window.localStorage.getItem('uid'));
        this.getAt(1).getAt(2).getStore().loadPage(1);
        return this.getAt(1).getAt(2).show();
    }
  }
});
