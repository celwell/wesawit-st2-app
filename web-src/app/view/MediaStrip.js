// Generated by CoffeeScript 1.3.3

Ext.define('WSI.view.MediaStrip', {
  extend: 'Ext.DataView',
  xtype: 'mediastrip',
  config: {
    inline: {
      wrap: false
    },
    loadingText: "",
    emptyText: "",
    scrollToTopOnRefresh: false,
    itemTpl: "<img class='photo-thumb {status}{[(typeof values.vid !== 'undefined' && values.vid !== null) ? ' video-thumb' : '']}' src='resources/images/black1x1.jpg' data-src='{[window.util.image_url(values, 'small')]}' height='165' width='165' /><span class='timestamp-on-thumb'>{[(values.status == 'uploading') ? 'Uploading...' : window.util.calc_time(values.timestampTaken, false, 'M j / g:ia')]}</span>",
    scrollable: {
      direction: 'horizontal',
      directionLock: true,
      indicators: false,
      momentumEasing: {
        momentum: {
          acceleration: 10,
          friction: 0.75
        }
      }
    },
    homeButtonDest: 'to-details-from-gallery',
    listeners: {
      initialize: function(c) {
        return c.getStore().setSorters({
          property: 'timestampTaken',
          direction: 'DESC'
        });
      },
      itemtap: function(c, index, target, record) {
        return c.fireEvent('openGallery', index, c.getStore(), c.config.homeButtonDest);
      },
      refresh: function(c) {
        c.lastLoadX = 0;
        c.visibleWidth = c.bodyElement.dom.clientWidth;
        c.thumbs = c.bodyElement.query('.photo-thumb');
        return c.loadImages(c.getScrollable().getScroller().position.x);
      }
    }
  },
  initialize: function() {
    this.callParent(arguments);
    return this.getScrollable().getScroller().on({
      scrollend: this.onScrollEnd,
      scope: this
    });
  },
  onScrollEnd: function(scroller, x, y) {
    if (!(Math.abs(this.lastLoadX - x) < this.getHeight())) {
      this.loadImages(x);
    }
    return true;
  },
  loadImages: function(x) {
    var displacement, i, leftBound, rightBound, thumb, width, _ref;
    if (x == null) {
      x = null;
    }
    if (x == null) {
      x = this.getScrollable().getScroller().position.x;
    }
    this.lastLoadX = x;
    width = this.getHeight();
    leftBound = x - width * 1.333 - 1000;
    rightBound = x + this.visibleWidth + 220 + 1000;
    displacement = 0;
    _ref = this.thumbs;
    for (i in _ref) {
      thumb = _ref[i];
      displacement += 10 + width;
      if (displacement > leftBound && displacement < rightBound) {
        if (thumb.src.indexOf('black1x1' !== -1)) {
          thumb.src = thumb.getAttribute("data-src");
        }
      }
    }
    return true;
  }
});
