// Generated by CoffeeScript 1.3.3

Ext.define("WSI.view.ImageViewer", {
  extend: "Ext.Container",
  xtype: "imageviewer",
  alias: "widget.imageviewer",
  config: {
    doubleTapScale: 1,
    maxScale: 4,
    loadingMask: true,
    previewSrc: false,
    resizeOnLoad: true,
    imageSrc: false,
    initOnActivate: false,
    cls: "imageBox",
    scrollable: "both",
    loadingMessage: "Loading ...",
    html: "<figure><img></figure>",
    errorImage: false
  },
  duringDestroy: false,
  initialize: function() {
    var me;
    me = this;
    if (me.getInitOnActivate()) {
      return me.on("activate", me.initViewer, me, {
        delay: 10,
        single: true
      });
    } else {
      return me.on("painted", me.initViewer, me, {
        delay: 10,
        single: true
      });
    }
  },
  initViewer: function() {
    var element, me, scroller;
    me = this;
    scroller = me.getScrollable().getScroller();
    element = me.element;
    scroller.setDisabled(true);
    if (me.getLoadingMask()) {
      me.setHtml(["<div class='x-loading-spinner-outer' style='position: absolute; top: 272px; left: 160px; margin-left: -12px;'>", "<div class='x-loading-spinner'>", "<span class='x-loading-top'></span>", "<span class='x-loading-right'></span>", "<span class='x-loading-bottom'></span>", "<span class='x-loading-left'></span>", "</div>", "</div>", me.getHtml()].join(""));
    }
    me.figEl = element.down("figure");
    me.imgEl = me.figEl.down("img");
    me.figEl.setStyle({
      overflow: "hidden",
      display: "block",
      margin: 0
    });
    me.imgEl.setStyle({
      "-webkit-user-drag": "none",
      "-webkit-transform-origin": "0 0",
      visibility: "hidden"
    });
    if (me.getPreviewSrc()) {
      element.setStyle({
        backgroundImage: "url(" + me.getPreviewSrc() + ")",
        backgroundPosition: "center center",
        backgroundRepeat: "no-repeat",
        webkitBackgroundSize: "contain"
      });
    }
    me.on("load", me.onImageLoad, me);
    me.imgEl.addListener({
      scope: me,
      doubletap: me.onDoubleTap,
      pinchstart: me.onImagePinchStart,
      pinch: me.onImagePinch,
      pinchend: me.onImagePinchEnd
    });
    if (me.getImageSrc()) {
      return me.loadImage(me.getImageSrc());
    }
  },
  loadImage: function(src) {
    var me;
    me = this;
    if (me.imgEl) {
      me.imgEl.dom.src = src;
      me.imgEl.dom.onload = Ext.Function.bind(me.onLoad, me, me.imgEl, 0);
      if (me.getErrorImage()) {
        return me.imgEl.dom.onerror = function() {
          return this.src = me.getErrorImage();
        };
      }
    } else {
      return me.setImageSrc(src);
    }
  },
  unloadImage: function() {
    var me;
    me = this;
    if (me.getLoadingMask()) {
      me.setHtml(["<div class='x-loading-spinner-outer' style='position: absolute; top: 225px; left: 168px; margin-left: -12px;'>", "<div class='x-loading-spinner'>", "<span class='x-loading-top'></span>", "<span class='x-loading-right'></span>", "<span class='x-loading-bottom'></span>", "<span class='x-loading-left'></span>", "</div>", "</div>", me.getHtml()].join(""));
    }
    if (me.imgEl) {
      me.imgEl.dom.src = "";
      return me.imgEl.setStyle({
        visibility: "hidden"
      });
    } else {
      me.setImageSrc("");
      return me.imgEl.setStyle({
        visibility: "hidden"
      });
    }
  },
  onLoad: function(el, e) {
    var me;
    me = this;
    me.addCls('hide-spinner');
    return me.fireEvent("load", me, el, e);
  },
  onImageLoad: function() {
    var me, parentElement, tmpTranslateX, tmpTranslateY;
    me = this;
    parentElement = me.parent.element;
    me.viewportWidth = me.viewportWidth || me.getWidth() || parentElement.getWidth();
    me.viewportHeight = me.viewportHeight || me.getHeight() || parentElement.getHeight();
    me.imgWidth = me.imgEl.dom.width;
    me.imgHeight = me.imgEl.dom.height;
    if (me.getResizeOnLoad()) {
      me.scale = me.baseScale = Math.min(me.viewportWidth / me.imgWidth, me.viewportHeight / me.imgHeight);
      me.setMaxScale(me.scale * 4);
    } else {
      me.scale = me.baseScale = 1;
    }
    tmpTranslateX = (me.viewportWidth - me.baseScale * me.imgWidth) / 2;
    tmpTranslateY = (me.viewportHeight - me.baseScale * me.imgHeight) / 2;
    me.setTranslation(tmpTranslateX, tmpTranslateY);
    me.translateBaseX = me.translateX;
    me.translateBaseY = me.translateY;
    me.applyTransform();
    me.adjustScroller();
    me.imgEl.setStyle({
      visibility: "visible"
    });
    if (me.getPreviewSrc()) {
      me.element.setStyle({
        backgroundImage: "none"
      });
    }
    if (me.getLoadingMask()) {
      me.setMasked(false);
    }
    return me.fireEvent("imageLoaded", me);
  },
  onImagePinchStart: function(ev) {
    var element, me, scale, scrollPosition, scroller, touches;
    me = this;
    scroller = me.getScrollable().getScroller();
    scrollPosition = scroller.position;
    touches = ev.touches;
    element = me.element;
    scale = me.scale;
    scroller.stopAnimation();
    scroller.setDisabled(true);
    me.startScale = scale;
    me.originViewportX = (touches[0].pageX + touches[1].pageX) / 2 - element.getX();
    me.originViewportY = (touches[0].pageY + touches[1].pageY) / 2 - element.getY();
    me.originScaledImgX = me.originViewportX + scrollPosition.x - me.translateX;
    me.originScaledImgY = me.originViewportY + scrollPosition.y - me.translateY;
    me.originFullImgX = me.originScaledImgX / scale;
    me.originFullImgY = me.originScaledImgY / scale;
    me.translateX += -1 * ((me.imgWidth * (1 - scale)) * (me.originFullImgX / me.imgWidth));
    me.translateY += -1 * ((me.imgHeight * (1 - scale)) * (me.originFullImgY / me.imgHeight));
    me.setOrigin(me.originFullImgX, me.originFullImgY);
    return me.applyTransform();
  },
  onImagePinch: function(ev) {
    var me;
    me = this;
    me.scale = Ext.Number.constrain(ev.scale * me.startScale, me.baseScale - 2, me.getMaxScale());
    return me.applyTransform();
  },
  onImagePinchEnd: function(ev) {
    var me;
    me = this;
    if (me.scale === me.baseScale) {
      me.setTranslation(me.translateBaseX, me.translateBaseY);
    } else {
      if (me.scale < me.baseScale && me.getResizeOnLoad()) {
        me.resetZoom();
        return;
      }
      me.originReScaledImgX = me.originScaledImgX * (me.scale / me.startScale);
      me.originReScaledImgY = me.originScaledImgY * (me.scale / me.startScale);
      me.setTranslation(me.originViewportX - me.originReScaledImgX, me.originViewportY - me.originReScaledImgY);
    }
    me.adjustScroller();
    return me.applyTransformAndResetOrigin();
  },
  onZoomIn: function() {
    var ev, me, myScale;
    me = this;
    ev = {
      pageX: 0,
      pageY: 0
    };
    myScale = me.scale;
    if (myScale < me.getMaxScale()) {
      myScale = me.scale + 0.05;
    }
    if (myScale >= me.getMaxScale()) {
      myScale = me.getMaxScale();
    }
    ev.pageX = me.viewportWidth / 2;
    ev.pageY = me.viewportHeight / 2;
    return me.zoomImage(ev, myScale);
  },
  onZoomOut: function() {
    var ev, me, myScale;
    me = this;
    ev = {
      pageX: 0,
      pageY: 0
    };
    myScale = me.scale;
    if (myScale > me.baseScale) {
      myScale = me.scale - 0.05;
    }
    if (myScale <= me.baseScale) {
      myScale = me.baseScale;
    }
    ev.pageX = me.viewportWidth / 2;
    ev.pageY = me.viewportHeight / 2;
    return me.zoomImage(ev, myScale);
  },
  zoomImage: function(ev, scale, scope) {
    var element, me, newScale, oldScale, originReScaledImgX, originReScaledImgY, originScaledImgX, originScaledImgY, originViewportX, originViewportY, scrollPosition, scroller;
    me = this;
    scroller = me.getScrollable().getScroller();
    scrollPosition = scroller.position;
    element = me.element;
    oldScale = me.scale;
    newScale = scale;
    originViewportX = (ev ? ev.pageX - element.getX() : 0);
    originViewportY = (ev ? ev.pageY - element.getY() : 0);
    originScaledImgX = originViewportX + scrollPosition.x - me.translateX;
    originScaledImgY = originViewportY + scrollPosition.y - me.translateY;
    originReScaledImgX = originScaledImgX * (newScale / oldScale);
    originReScaledImgY = originScaledImgY * (newScale / oldScale);
    me.scale = newScale;
    return setTimeout((function() {
      me.setTranslation(originViewportX - originReScaledImgX, originViewportY - originReScaledImgY);
      this.setOrigin(0, 0);
      me.applyTransform();
      me.adjustScroller();
      return Ext.repaint();
    }), 1);
  },
  onDoubleTap: function(ev, t) {
    var element, me, newScale, oldScale, originReScaledImgX, originReScaledImgY, originScaledImgX, originScaledImgY, originViewportX, originViewportY, scrollPosition, scroller;
    me = this;
    scroller = me.getScrollable().getScroller();
    scrollPosition = scroller.position;
    element = me.element;
    if (!me.getDoubleTapScale()) {
      return false;
    }
    if (me.scale > me.baseScale) {
      me.scale = me.baseScale;
      me.setTranslation(me.translateBaseX, me.translateBaseY);
      me.applyTransform();
      me.adjustScroller();
      return Ext.repaint();
    } else {
      oldScale = me.scale;
      newScale = me.baseScale * 4;
      originViewportX = (ev ? ev.pageX - element.getX() : 0);
      originViewportY = (ev ? ev.pageY - element.getY() : 0);
      originScaledImgX = originViewportX + scrollPosition.x - me.translateX;
      originScaledImgY = originViewportY + scrollPosition.y - me.translateY;
      originReScaledImgX = originScaledImgX * (newScale / oldScale);
      originReScaledImgY = originScaledImgY * (newScale / oldScale);
      me.scale = newScale;
      return setTimeout((function() {
        me.setTranslation(originViewportX - originReScaledImgX, originViewportY - originReScaledImgY);
        me.applyTransform();
        me.adjustScroller();
        return Ext.repaint();
      }), 50);
    }
  },
  setOrigin: function(x, y) {
    return this.imgEl.dom.style.webkitTransformOrigin = x + "px " + y + "px";
  },
  setTranslation: function(translateX, translateY) {
    var me;
    me = this;
    me.translateX = translateX;
    me.translateY = translateY;
    me.scrollX = me.scrollY = 0;
    if (me.translateX < 0) {
      me.scrollX = me.translateX;
      me.translateX = 0;
    }
    if (me.translateY < 0) {
      me.scrollY = me.translateY;
      return me.translateY = 0;
    }
  },
  resetZoom: function() {
    var me;
    me = this;
    if (typeof this.imgEl !== "undefined") {
      if (me.duringDestroy) {
        return;
      }
      me.scale = me.baseScale;
      me.setTranslation(me.translateBaseX, me.translateBaseY);
      me.setOrigin(0, 0);
      me.applyTransform();
      return me.adjustScroller();
    }
  },
  resize: function() {
    var me;
    me = this;
    if (typeof this.imgEl !== "undefined") {
      me.viewportWidth = me.parent.element.getWidth() || me.viewportWidth || me.getWidth();
      me.viewportHeight = me.parent.element.getHeight() || me.viewportHeight || me.getHeight();
      me.imgWidth = me.imgEl.dom.width;
      me.imgHeight = me.imgEl.dom.height;
      if (me.getResizeOnLoad()) {
        me.scale = me.baseScale = Math.min(me.viewportWidth / me.imgWidth, me.viewportHeight / me.imgHeight);
        me.setMaxScale(me.scale * 4);
      } else {
        me.scale = me.baseScale = 1;
      }
      me.translateX = me.translateBaseX = (me.viewportWidth - me.baseScale * me.imgWidth) / 2;
      me.translateY = me.translateBaseY = (me.viewportHeight - me.baseScale * me.imgHeight) / 2;
      me.adjustScroller();
      return me.applyTransform();
    }
  },
  applyTransform: function() {
    var me;
    me = this;
    if (!Ext.os.is.Android) {
      return me.imgEl.dom.style.webkitTransform = "translate3d(" + parseInt(me.translateX) + "px, " + parseInt(me.translateY) + "px, 0)" + " scale3d(" + parseInt(me.scale * 1000) / 1000 + "," + parseInt(me.scale * 1000) / 1000 + ",1)";
    }
  },
  applyTransformAndResetOrigin: function() {
    var me;
    me = this;
    if (!Ext.os.is.Android) {
      me.imgEl.dom.style.webkitTransformOrigin = "0px 0px";
      return me.imgEl.dom.style.webkitTransform = "translate3d(" + parseInt(me.translateX) + "px, " + parseInt(me.translateY) + "px, 0)" + " scale3d(" + parseInt(me.scale * 1000) / 1000 + "," + parseInt(me.scale * 1000) / 1000 + ",1)";
    }
  },
  adjustScroller: function() {
    var boundHeight, boundWidth, me, scale, scroller, x, y;
    me = this;
    scroller = me.getScrollable().getScroller();
    scale = me.scale;
    if (scale === me.baseScale) {
      scroller.setDisabled(true);
    } else {
      scroller.setDisabled(false);
    }
    boundWidth = Math.max(me.imgWidth * scale, me.viewportWidth);
    boundHeight = Math.max(me.imgHeight * scale, me.viewportHeight);
    me.figEl.setStyle({
      width: boundWidth + "px",
      height: boundHeight + "px"
    });
    scroller.refresh();
    x = 0;
    if (me.scrollX) {
      x = me.scrollX;
    }
    y = 0;
    if (me.scrollY) {
      y = me.scrollY;
    }
    return scroller.scrollTo(x * -1, y * -1);
  },
  destroy: function() {
    var me;
    me = this;
    me.duringDestroy = true;
    me.un("activate", me.initViewer, me);
    me.un("painted", me.initViewer, me);
    Ext.destroy(me.getScrollable(), me.imgEl);
    return me.callParent();
  }
});
