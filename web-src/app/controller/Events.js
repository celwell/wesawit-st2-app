// Generated by CoffeeScript 1.3.3

Ext.define('WSI.controller.Events', {
  extend: 'Ext.app.Controller',
  requires: ['Ext.Carousel', 'WSI.view.ImageViewer', 'WSI.view.EventDetailsContainer', 'WSI.view.WhosThereContainer', 'WSI.view.CreateEventForm', 'WSI.view.WhereContainer', 'WSI.view.WhenContainer'],
  config: {
    refs: {
      mainContainer: 'maincontainer',
      accountPanel: 'account',
      activityPanel: 'activity',
      followingPanel: 'following',
      eventsListContainer: 'eventslistcontainer',
      eventsListPresent: '#eventslistpresent',
      eventsListPast: '#eventslistpast',
      eventsListFuture: '#eventslistfuture',
      eventsListSearch: '#eventslistsearch',
      browseTab: '#browseTab',
      eventDetailsContainer: 'eventdetailscontainer',
      whosThereContainer: '#whostherecontainer',
      mediaStrip: 'mediastrip',
      mediaWall: 'mediawall',
      gallery: '#gallery',
      createEventForm: 'createeventform',
      topToolbar: 'toptoolbar',
      topToolbarHomeButton: 'toptoolbar #homeButton',
      createEventButton: '#createEventButton',
      moreActionsButton: '#moreActionsButton',
      sliderMenu: '#sliderMenu',
      whereContainer: 'wherecontainer',
      whenContainer: 'whencontainer',
      askAlreadyExistsPanel: '#askalreadyexistspanel',
      askAddToPanel: '#askaddtopanel'
    },
    control: {
      mainContainer: {
        grabCurrentPosition: 'grabCurrentPosition'
      },
      activityPanel: {
        deleteRecord: 'deleteRecord',
        viewEventCommand: 'onViewEventCommand'
      },
      followingPanel: {
        viewEventCommand: 'onViewEventCommand'
      },
      eventsListContainer: {
        viewEventCommand: 'onViewEventCommand',
        accountCommand: 'onAccountCommand',
        hideTopToolbarHomeButton: 'hideTopToolbarHomeButton',
        showTopToolbarHomeButton: 'showTopToolbarHomeButton',
        hideCreateEventButton: 'hideCreateEventButton',
        showCreateEventButton: 'showCreateEventButton',
        hideMoreActionsButton: 'hideMoreActionsButton',
        showMoreActionsButton: 'showMoreActionsButton',
        showLoading: 'showLoading',
        hideLoading: 'hideLoading',
        refreshMap: 'refreshMap',
        resetTopToolbarTitle: 'resetTopToolbarTitle',
        revertTopToolbarTitle: 'revertTopToolbarTitle',
        populateUiForSearch: 'populateUiForSearch',
        captureMediaButtonTap: 'initCaptureMedia'
      },
      eventsList: {
        grabCurrentPosition: 'grabCurrentPosition'
      },
      topToolbar: {
        homeButtonTap: 'onHomeButtonTap',
        createEventButtonTap: 'showNewEventForm',
        moreActionsButtonTap: 'showMoreActions'
      },
      eventDetailsContainer: {
        newCommentSubmit: 'onNewCommentSubmit',
        flagMedia: 'flagMedia',
        refreshForEventDetails: 'refreshForEventDetails',
        mediaLibraryButtonTap: 'openMediaLibrary',
        whosThereButtonTap: 'openWhosThere',
        shareButtonTap: 'shareMedia'
      },
      mediaStrip: {
        openGallery: 'openGallery'
      },
      mediaWall: {
        openGallery: 'openGallery'
      },
      whosThereContainer: {
        focusOnPhoto: 'openGallery'
      },
      createEventForm: {
        createEventFormSubmit: 'createEventFormSubmit',
        onApplyListOfCategories: 'onApplyListOfCategories',
        showWhereContainer: 'showWhereContainer',
        showWhenContainer: 'showWhenContainer',
        newEventChooseLocation: 'newEventChooseLocation',
        newEventChooseTimeInfo: 'newEventChooseTimeInfo',
        generateSuggestions: 'generateSuggestions',
        homeButtonTap: 'onHomeButtonTap'
      },
      whereContainer: {
        newEventChooseLocation: 'newEventChooseLocation',
        generateSuggestions: 'generateSuggestions'
      },
      whenContainer: {
        newEventChooseTimeInfo: 'newEventChooseTimeInfo'
      }
    },
    listOfCategories: null,
    targetEid: false,
    targetRecord: false,
    uploadMediaFileUponNextViewEvent: null
  },
  mediaAddQueue: {},
  launch: function() {
    this.callParent(arguments);
    window.launchEndTime = new Date();
    this.reinstateDynamicLists();
    setTimeout((function() {
      var _ref;
      return (_ref = navigator.splashscreen) != null ? _ref.hide() : void 0;
    }), 350);
    return setTimeout(Ext.bind(this.delayedTasksAfterLaunch, this), 3000);
  },
  delayedTasksAfterLaunch: function() {
    var iosToolbar, onBackButton, onPause, onResume;
    this.clearGpsLocation(15000);
    onResume = Ext.bind((function() {
      var timeoutTillRemoveSplash;
      timeoutTillRemoveSplash = 0;
      if (!this.pauseDueToPluginIntent) {
        setTimeout(Ext.bind((function() {
          this.refreshForEventDetails();
          Ext.data.StoreManager.each(function() {
            if (this.isLoaded() && (!(this.lastTimeLoadCalled != null) || (new Date()).getTime() - this.lastTimeLoadCalled.getTime() > 60000)) {
              this.load();
              return timeoutTillRemoveSplash = 3500;
            }
          });
          return this.clearGpsLocation(15000);
        }), this), 750);
      } else {
        this.pauseDueToPluginIntent = false;
      }
      return setTimeout((function() {
        var _ref;
        return (_ref = navigator.splashscreen) != null ? _ref.hide() : void 0;
      }), timeoutTillRemoveSplash);
    }), this);
    document.addEventListener("resume", onResume, false);
    onPause = Ext.bind((function() {
      var _ref;
      return (_ref = navigator.splashscreen) != null ? _ref.show() : void 0;
    }), this);
    document.addEventListener("pause", onPause, false);
    if (Ext.os.is.iOS) {
      iosToolbar = typeof cordova !== "undefined" && cordova !== null ? cordova.require('cordova/plugin/keyboard_toolbar_remover') : void 0;
      if (iosToolbar != null) {
        iosToolbar.hide();
      }
      window.flurry.startSession("---REMOVED---", (function() {}), (function() {}));
      this.checkForNewAppVersion();
    }
    if (Ext.os.is.Android) {
      onBackButton = Ext.bind((function() {
        return this.onHomeButtonTap();
      }), this);
      return document.addEventListener("backbutton", onBackButton, false);
    }
    /*
        domLength = ->
          console.log 'dom length: ' + document.getElementsByTagName('*').length # if dom length gets up around 1500 or more, that's pretty bad. we want it under 1000 if possible.
        setInterval domLength, 2000
    */

  },
  checkForNewAppVersion: function() {
    return Ext.Ajax.request({
      url: "http://wesawit.com/app/current_version/ios",
      method: 'GET',
      success: function(response) {
        var confFn, needToUpdate, v1, v2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        v1 = util.APP_VERSION.split(".");
        v2 = response.responseText.split(".");
        if ((_ref = v1[0]) == null) {
          v1[0] = 0;
        }
        if ((_ref1 = v2[0]) == null) {
          v2[0] = 0;
        }
        if ((_ref2 = v1[1]) == null) {
          v1[1] = 0;
        }
        if ((_ref3 = v2[1]) == null) {
          v2[1] = 0;
        }
        if ((_ref4 = v1[2]) == null) {
          v1[2] = 0;
        }
        if ((_ref5 = v2[2]) == null) {
          v2[2] = 0;
        }
        needToUpdate = false;
        if (parseInt(v1[0]) < parseInt(v2[0])) {
          needToUpdate = true;
        } else if (parseInt(v1[0]) === parseInt(v2[0])) {
          if (parseInt(v1[1]) < parseInt(v2[1])) {
            needToUpdate = true;
          } else if (parseInt(v1[1]) === parseInt(v2[1])) {
            if (parseInt(v1[2]) < parseInt(v2[2])) {
              needToUpdate = true;
            }
          }
        }
        if (needToUpdate) {
          confFn = function(buttonIndex) {
            if (buttonIndex === 2) {
              return window.location = 'https://itunes.apple.com/app/id544946196';
            } else {
              return console.log('canceld');
            }
          };
          return navigator.notification.confirm('', confFn, 'A new version is available!', 'Ignore,Download');
        }
      }
    });
  },
  clearGpsLocation: function(maxAge, refreshPosition) {
    if (maxAge == null) {
      maxAge = -1;
    }
    if (refreshPosition == null) {
      refreshPosition = true;
    }
    if (!(window.localStorage.getItem('locationTimestamp') != null) || window.localStorage.getItem('locationTimestamp') === '' || (new Date()) - new Date(window.localStorage.getItem('locationTimestamp')) > maxAge) {
      window.localStorage.setItem('locationLat', '0');
      window.localStorage.setItem('locationLng', '0');
      window.localStorage.setItem('locationTimestamp', '');
      if (refreshPosition) {
        return this.grabCurrentPosition();
      }
    }
  },
  onHomeButtonTap: function() {
    var _ref, _ref1, _ref2;
    if (!this.getTopToolbarHomeButton().config.busyHandling) {
      this.getTopToolbarHomeButton().config.busyHandling = true;
      switch (this.getTopToolbarHomeButton().config.dest) {
        case 'to-home-from-details':
          this.getTopToolbarHomeButton().hide();
          this.getMoreActionsButton().hide();
          this.resetTopToolbarTitle();
          if ((_ref = this.getCreateEventButton()) != null) {
            _ref.show();
          }
          this.getBrowseTab().setActiveItem(0);
          this.getBrowseTab().remove(this.getEventDetailsContainer(), true);
          break;
        case 'to-details-from-gallery':
          this.getTopToolbarHomeButton().config.dest = 'to-home-from-details';
          this.getMainContainer().remove(this.getGallery(), true);
          this.getEventDetailsContainer().loadImages(this.getEventDetailsContainer().getScrollable().getScroller().position.y);
          this.getMoreActionsButton().show();
          break;
        case 'to-whosthere-from-gallery':
          this.getTopToolbarHomeButton().config.dest = 'to-details-from-whosthere';
          this.getMainContainer().remove(this.getGallery(), true);
          this.getMoreActionsButton().show();
          break;
        case 'to-details-from-whosthere':
          this.setEventTitle(this.getEventDetailsContainer().getEventRecord());
          this.getTopToolbarHomeButton().config.dest = 'to-home-from-details';
          this.getBrowseTab().setActiveItem(this.getEventDetailsContainer());
          this.getBrowseTab().remove(this.getWhosThereContainer(), true);
          this.getMoreActionsButton().show();
          Ext.getStore('WhosThere').removeAll();
          break;
        case 'to-home-from-create':
          this.getMainContainer().remove(this.getCreateEventForm(), true);
          if (this.getGallery() != null) {
            this.getMainContainer().setActiveItem(this.getGallery());
            this.getTopToolbarHomeButton().config.dest = 'to-details-from-gallery';
            this.getTopToolbarHomeButton().show();
            if ((_ref1 = this.getMoreActionsButton()) != null) {
              _ref1.show();
            }
            this.setEventTitle(this.getEventDetailsContainer().getEventRecord());
            this.getMoreActionsButton().show();
          } else if ((this.getEventDetailsContainer() != null) && this.getBrowseTab().getActiveItem() === this.getEventDetailsContainer()) {
            this.getTopToolbarHomeButton().config.dest = 'to-home-from-details';
            this.getTopToolbarHomeButton().show();
            this.setEventTitle(this.getEventDetailsContainer().getEventRecord());
            this.getMoreActionsButton().show();
          } else if ((this.getWhosThereContainer() != null) && this.getBrowseTab().getActiveItem() === this.getWhosThereContainer()) {
            this.getTopToolbarHomeButton().config.dest = 'to-details-from-whosthere';
            this.getTopToolbarHomeButton().show();
            this.setEventTitle(this.getEventDetailsContainer().getEventRecord());
            this.getMoreActionsButton().show();
          } else {
            this.getTopToolbarHomeButton().hide();
            this.resetTopToolbarTitle();
            if ((_ref2 = this.getCreateEventButton()) != null) {
              _ref2.show();
            }
          }
          break;
        case 'to-create-from-where':
          this.getTopToolbarHomeButton().config.dest = 'to-home-from-create';
          this.getTopToolbarHomeButton().hide();
          this.getMainContainer().remove(this.getWhereContainer(), true);
          this.getMainContainer().setActiveItem(this.getCreateEventForm());
          this.getTopToolbar().setTitle("<div class='full-title'>New Event</div>");
          break;
        case 'to-create-from-when':
          this.getTopToolbarHomeButton().config.dest = 'to-home-from-create';
          this.getTopToolbarHomeButton().hide();
          this.getMainContainer().remove(this.getWhenContainer(), true);
          this.getMainContainer().setActiveItem(this.getCreateEventForm());
          this.getTopToolbar().setTitle("<div class='full-title'>New Event</div>");
          break;
        case 'to-create-from-alreadyexists':
          this.getTopToolbarHomeButton().config.dest = 'to-home-from-create';
          this.getTopToolbarHomeButton().hide();
          Ext.Viewport.setMasked(false);
          Ext.Viewport.remove(this.getAskAlreadyExistsPanel(), true);
          this.getMainContainer().setActiveItem(this.getCreateEventForm());
          this.getTopToolbar().setTitle("<div class='full-title'>New Event</div>");
      }
    }
    return this.getTopToolbarHomeButton().config.busyHandling = false;
  },
  showWhereContainer: function() {
    this.getTopToolbarHomeButton().config.dest = 'to-create-from-where';
    this.getTopToolbarHomeButton().show();
    this.getTopToolbar().setTitle("<div class='full-title'>Where</div>");
    return this.getMainContainer().setActiveItem(Ext.create('WSI.view.WhereContainer'));
  },
  showWhenContainer: function() {
    this.getTopToolbarHomeButton().config.dest = 'to-create-from-when';
    this.getTopToolbarHomeButton().show();
    this.getTopToolbar().setTitle("<div class='full-title'>When</div>");
    return this.getMainContainer().setActiveItem(Ext.create('WSI.view.WhenContainer'));
  },
  hideTopToolbarHomeButton: function() {
    var _ref;
    return (_ref = this.getTopToolbarHomeButton()) != null ? _ref.hide() : void 0;
  },
  showTopToolbarHomeButton: function() {
    var _ref;
    return (_ref = this.getTopToolbarHomeButton()) != null ? _ref.show() : void 0;
  },
  hideMoreActionsButton: function() {
    var _ref;
    return (_ref = this.getMoreActionsButton()) != null ? _ref.hide() : void 0;
  },
  showMoreActionsButton: function() {
    var _ref;
    return (_ref = this.getMoreActionsButton()) != null ? _ref.show() : void 0;
  },
  showMoreActions: function() {
    var ctrl, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    ctrl = this;
    if (Ext.os.is.Android) {
      return window.plugins.actionSheet.create({
        title: (_ref = ctrl.getEventDetailsContainer()) != null ? (_ref1 = _ref.getEventRecord()) != null ? _ref1.get('title').replace('&amp;', '&') : void 0 : void 0,
        items: [((_ref2 = ctrl.getEventDetailsContainer()) != null ? (_ref3 = _ref2.getEventRecord()) != null ? _ref3.get('bookmarked_by_me') : void 0 : void 0) ? 'Stop following this event' : 'Follow this event', 'Share via Facebook', 'Share via Email', 'Report as inappropriate', 'Cancel'],
        destructiveButtonIndex: 3,
        cancelButtonIndex: 4
      }, function(value, index) {
        var _ref4, _ref5, _ref6;
        switch (index) {
          case 0:
            return ctrl.bookmarkEvent();
          case 1:
            return ctrl.shareMedia(ctrl, 'event', (_ref4 = ctrl.getEventDetailsContainer()) != null ? _ref4.getEventRecord() : void 0, 'facebook');
          case 2:
            return ctrl.shareMedia(ctrl, 'event', (_ref5 = ctrl.getEventDetailsContainer()) != null ? _ref5.getEventRecord() : void 0, 'email');
          case 3:
            return ctrl.flagEvent((_ref6 = ctrl.getEventDetailsContainer()) != null ? _ref6.getEventRecord() : void 0);
          case 4:
            return true;
        }
      });
    } else {
      return window.plugins.actionSheet.create({
        title: (_ref4 = ctrl.getEventDetailsContainer()) != null ? (_ref5 = _ref4.getEventRecord()) != null ? _ref5.get('title').replace('&amp;', '&') : void 0 : void 0,
        items: [((_ref6 = ctrl.getEventDetailsContainer()) != null ? (_ref7 = _ref6.getEventRecord()) != null ? _ref7.get('bookmarked_by_me') : void 0 : void 0) ? 'Stop following this event' : 'Follow this event', 'Share via Facebook', 'Share via Twitter', 'Share via Email', 'Report as inappropriate', 'Cancel'],
        destructiveButtonIndex: 4,
        cancelButtonIndex: 5
      }, function(value, index) {
        var _ref10, _ref11, _ref8, _ref9;
        switch (index) {
          case 0:
            return ctrl.bookmarkEvent();
          case 1:
            return ctrl.shareMedia(ctrl, 'event', (_ref8 = ctrl.getEventDetailsContainer()) != null ? _ref8.getEventRecord() : void 0, 'facebook');
          case 2:
            return ctrl.shareMedia(ctrl, 'event', (_ref9 = ctrl.getEventDetailsContainer()) != null ? _ref9.getEventRecord() : void 0, 'twitter');
          case 3:
            return ctrl.shareMedia(ctrl, 'event', (_ref10 = ctrl.getEventDetailsContainer()) != null ? _ref10.getEventRecord() : void 0, 'email');
          case 4:
            return ctrl.flagEvent((_ref11 = ctrl.getEventDetailsContainer()) != null ? _ref11.getEventRecord() : void 0);
          case 5:
            return true;
        }
      });
    }
  },
  showMoreActionsMedia: function(type, record) {
    var ctrl, _ref, _ref1, _ref2, _ref3;
    ctrl = this;
    if (Ext.os.is.Android) {
      return window.plugins.actionSheet.create({
        title: ("" + (type[0].toUpperCase() + type.substr(1)) + " of ") + ((_ref = ctrl.getEventDetailsContainer()) != null ? (_ref1 = _ref.getEventRecord()) != null ? _ref1.get('title').replace('&amp;', '&') : void 0 : void 0),
        items: ['Share via Facebook', 'Share via Email', 'Report as inappropriate', 'Cancel'],
        destructiveButtonIndex: 2,
        cancelButtonIndex: 3
      }, function(value, index) {
        switch (index) {
          case 0:
            return ctrl.shareMedia(ctrl, type, record, 'facebook');
          case 1:
            return ctrl.shareMedia(ctrl, type, record, 'email');
          case 2:
            return ctrl.flagMedia(type, record);
          case 3:
            return true;
        }
      });
    } else {
      return window.plugins.actionSheet.create({
        title: ("" + (type[0].toUpperCase() + type.substr(1)) + " of ") + ((_ref2 = ctrl.getEventDetailsContainer()) != null ? (_ref3 = _ref2.getEventRecord()) != null ? _ref3.get('title').replace('&amp;', '&') : void 0 : void 0),
        items: ['Share via Facebook', 'Share via Twitter', 'Share via Email', 'Report as inappropriate', 'Cancel'],
        destructiveButtonIndex: 3,
        cancelButtonIndex: 4
      }, function(value, index) {
        switch (index) {
          case 0:
            return ctrl.shareMedia(ctrl, type, record, 'facebook');
          case 1:
            return ctrl.shareMedia(ctrl, type, record, 'twitter');
          case 2:
            return ctrl.shareMedia(ctrl, type, record, 'email');
          case 3:
            return ctrl.flagMedia(type, record);
          case 4:
            return true;
        }
      });
    }
  },
  hideCreateEventButton: function() {
    var _ref;
    return (_ref = this.getCreateEventButton()) != null ? _ref.hide() : void 0;
  },
  showCreateEventButton: function() {
    var _ref;
    return (_ref = this.getCreateEventButton()) != null ? _ref.show() : void 0;
  },
  refreshForEventDetails: function() {
    if (this.getEventDetailsContainer() != null) {
      return Ext.Ajax.request({
        url: 'http://wesawit.com/event/get_media_page',
        params: {
          token: window.localStorage.getItem('wsitoken'),
          uid: window.localStorage.getItem('uid'),
          eid: this.getEventDetailsContainer().getEventRecord().get('id'),
          start: 0,
          limit: 100
        },
        timeout: 30000,
        method: 'GET',
        scope: this,
        success: function(response) {
          var arr, i, r, _i, _len, _ref;
          if (this.getEventDetailsContainer() != null) {
            r = Ext.JSON.decode(response.responseText);
            if (this.getEventDetailsContainer().getEventRecord().get('outdated') === true) {
              this.getEventDetailsContainer().getEventRecord().set('outdated', false);
            }
            this.getEventDetailsContainer().media = new Array();
            _ref = r.medias;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              i.status = 'loaded';
              i.event_id = i.aeid;
              arr = i.timestampTaken.split(/[- :\.]/);
              i.timestampTaken = new Date();
              i.timestampTaken.setUTCSeconds(parseInt(arr[5]));
              i.timestampTaken.setUTCMinutes(parseInt(arr[4]));
              i.timestampTaken.setUTCHours(parseInt(arr[3]));
              i.timestampTaken.setUTCDate(parseInt(arr[2]));
              i.timestampTaken.setUTCMonth(parseInt(arr[1] - 1));
              i.timestampTaken.setUTCFullYear(parseInt(arr[0]));
              if (i.pid != null) {
                i.url = null;
                i.mediumUrl = null;
                if (i.thumbUrl !== '') {
                  i.url = i.thumbUrl.slice(0, -5) + '7.jpg';
                  i.mediumUrl = i.thumbUrl.slice(0, -5) + '6.jpg';
                } else {
                  i.url = null;
                  i.mediumUrl = null;
                  i.thumbUrl = null;
                }
              }
              this.getEventDetailsContainer().media.push(i);
            }
            if (this.getEventDetailsContainer().media.length === 0) {
              this.getEventDetailsContainer().getAt(2).getStore().removeAll();
            } else {
              this.getEventDetailsContainer().getAt(2).getStore().setData(this.getEventDetailsContainer().media);
            }
            this.getMediaWall().refreshItemTpl();
            this.getMediaWall().refresh();
          }
          return Ext.Viewport.setMasked(false);
        },
        failure: function() {
          console.log('failed to refresh event details contianrer');
          return Ext.Viewport.setMasked(false);
        }
      });
    } else {
      return Ext.Viewport.setMasked(false);
    }
  },
  bookmarkEvent: function() {
    var record, _ref;
    if (((_ref = this.getEventDetailsContainer()) != null ? _ref.getEventRecord() : void 0) != null) {
      if (!(window.localStorage.getItem('wsitoken') != null)) {
        this.getTopToolbarHomeButton().setHidden(true);
        this.getMoreActionsButton().hide();
        this.getEventsListContainer().setActiveItem(3);
        return this.getMainContainer().setActiveItem(0);
      } else {
        Ext.Viewport.setMasked({
          xtype: 'loadmask',
          message: ''
        });
        record = this.getEventDetailsContainer().getEventRecord();
        return Ext.Ajax.request({
          url: "http://wesawit.com/event/bookmark/" + (record.get('id')),
          method: 'POST',
          params: {
            'token': window.localStorage.getItem('wsitoken'),
            'uid': window.localStorage.getItem('uid'),
            'unbookmark': record.get('bookmarked_by_me')
          },
          timeout: 7000,
          success: function(response) {
            var resp;
            Ext.Viewport.setMasked(false);
            resp = Ext.decode(response.responseText);
            if (resp.success) {
              record.set('bookmarked_by_me', !record.get('bookmarked_by_me'));
              return navigator.notification.alert("" + (record.get('bookmarked_by_me') ? 'Started' : 'Stopped') + " following this event", (function() {}), "" + (record.get('title').replace('&amp;', '&')));
            } else {
              return navigator.notification.alert('Session has expired, please log out and log in again.', (function() {}), 'Oops!');
            }
          },
          failure: function(response) {
            Ext.Viewport.setMasked(false);
            if ((response.timedout != null) && response.timedout) {
              return navigator.notification.alert('Your internet connection seems to be going too slow.', (function() {}), 'Hmm...');
            } else {
              return navigator.notification.alert('Please try again later.', (function() {}), 'Oops!');
            }
          },
          scope: this
        });
      }
    }
  },
  setEventTitle: function(record) {
    this.getTopToolbar().addCls('hide-logo');
    this.topToolbarLastTitle = record.get('title');
    if (this.topToolbarLastTitle.length > 30) {
      this.getTopToolbar().addCls('long-title');
    } else {
      this.getTopToolbar().removeCls('long-title');
    }
    return this.getTopToolbar().setTitle(this.topToolbarLastTitle);
  },
  onViewEventCommand: function(legacyPlaceholderIgnore, record, scrollToTop) {
    var entry, eventDetailsContainer, imageURI, mediaStrip, mediaType, mediumURI, metadata, mid, thumbURI, viewReportFn, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if (scrollToTop == null) {
      scrollToTop = true;
    }
    if (!(this.getEventDetailsContainer() != null)) {
      eventDetailsContainer = Ext.create('WSI.view.EventDetailsContainer');
      eventDetailsContainer.changeEvent(record, scrollToTop);
    } else if (this.getEventDetailsContainer().getEventRecord().get('id') !== record.get('id')) {
      this.getEventDetailsContainer().destroy();
      eventDetailsContainer = Ext.create('WSI.view.EventDetailsContainer');
      eventDetailsContainer.changeEvent(record, scrollToTop);
    }
    if ((_ref = this.getWhosThereContainer()) != null) {
      _ref.destroy();
    }
    this.getTopToolbarHomeButton().config.dest = 'to-home-from-details';
    this.getTopToolbarHomeButton().show();
    if ((_ref1 = this.getMoreActionsButton()) != null) {
      _ref1.show();
    }
    if ((_ref2 = this.getCreateEventButton()) != null) {
      _ref2.hide();
    }
    this.setEventTitle(record);
    this.getMainContainer().setActiveItem(this.getEventsListContainer());
    this.getBrowseTab().setActiveItem(eventDetailsContainer);
    this.getEventsListContainer().setActiveItem(this.getBrowseTab());
    viewReportFn = function() {
      var _ref3, _ref4;
      return Ext.Ajax.request({
        url: "http://wesawit.com/event/report_a_view/" + (record.get('id')) + "/event",
        method: 'GET',
        params: {
          'token': (_ref3 = window.localStorage.getItem('wsitoken')) != null ? _ref3 : '',
          'uid': (_ref4 = window.localStorage.getItem('uid')) != null ? _ref4 : ''
        }
      });
    };
    setTimeout(viewReportFn, 3000);
    if (this.getUploadMediaFileUponNextViewEvent() != null) {
      if (this.tempRecordOfNewEvent === record) {
        imageURI = this.getUploadMediaFileUponNextViewEvent().imageURI;
        mediaType = this.getUploadMediaFileUponNextViewEvent().mediaType;
        metadata = this.getUploadMediaFileUponNextViewEvent().metadata;
        mediumURI = this.getUploadMediaFileUponNextViewEvent().mediumURI;
        thumbURI = this.getUploadMediaFileUponNextViewEvent().thumbURI;
        mid = this.getUploadMediaFileUponNextViewEvent().mid;
        mediaStrip = this.getMediaWall();
        entry = {
          id: mid,
          pid: null,
          vid: null,
          aeid: record.get('id'),
          event_id: record.get('id'),
          worthinessCount: 0,
          deemed_worthy_by_me: false,
          flagCount: 0,
          flagged_by_me: false,
          author: window.localStorage.getItem('username'),
          authorUid: window.localStorage.getItem('uid'),
          url: imageURI != null ? imageURI : 'resources/images/placeholder.jpg',
          thumbUrl: thumbURI != null ? thumbURI : 'resources/images/placeholder.jpg',
          mediumUrl: mediumURI != null ? mediumURI : 'resources/images/placeholder.jpg',
          status: 'uploading',
          timestampTaken: (_ref3 = this.getDateTimeFromMetadata(metadata, true)) != null ? _ref3 : new Date()
        };
        if (mediaType === 'photo') {
          entry.pid = mid;
          entry.vid = null;
        } else {
          entry.pid = null;
          entry.vid = mid;
        }
        if (this.getEventDetailsContainer() != null) {
          this.getEventDetailsContainer().media.unshift(entry);
          this.getEventDetailsContainer().getAt(2).getStore().setData(this.getEventDetailsContainer().media);
          mediaStrip.refreshItemTpl();
          mediaStrip.refresh();
        }
        if (((_ref4 = this.mediaAddQueue['' + mid]) != null ? _ref4['video_status'] : void 0) === 'loaded' || (((_ref5 = this.mediaAddQueue['' + mid]) != null ? _ref5['econ_status'] : void 0) === 'loaded' && ((_ref6 = this.mediaAddQueue['' + mid]) != null ? _ref6['thumb_status'] : void 0) === 'loaded')) {
          this.addMedia(record, mid, mediaType, metadata, this.mediaAddQueue['' + mid]['fileExt']);
        } else {
          this.mediaAddQueue['' + mid]['targetEventRecord'] = record;
          this.mediaAddQueue['' + mid]['metadata'] = metadata;
        }
      }
      this.setUploadMediaFileUponNextViewEvent(null);
    }
    if (record.get('outdated') === true) {
      return this.refreshForEventDetails();
    }
  },
  geolocationSuccess: function(position) {
    var _ref, _ref1, _ref2, _ref3;
    window.localStorage.setItem('locationLat', position.coords.latitude);
    window.localStorage.setItem('locationLng', position.coords.longitude);
    window.localStorage.setItem('locationTimestamp', new Date());
    if ((_ref = this.getEventsListPresent()) != null) {
      _ref.refresh();
    }
    if ((_ref1 = this.getEventsListPast()) != null) {
      _ref1.refresh();
    }
    if ((_ref2 = this.getEventsListFuture()) != null) {
      _ref2.refresh();
    }
    return (_ref3 = this.getEventsListSearch()) != null ? _ref3.refresh() : void 0;
  },
  geolocationError: function(error) {
    if (util.DEBUG) {
      console.log('geolocation error');
    }
    return true;
  },
  milesBetweenCoords: function(latA, lngA, latB, lngB) {
    var latDiffMiles, lngDiffMiles;
    latDiffMiles = (latA - latB) * 68.88;
    lngDiffMiles = (lngA - lngB) * 59.95;
    return Math.sqrt(latDiffMiles * latDiffMiles + lngDiffMiles * lngDiffMiles);
  },
  isMetadataOk: function(metadata, record) {
    var eventDateTimeEnd, eventDateTimeStart, metadataDateTime, metadataDateTimeDateObj, _ref, _ref1;
    if ((metadata.locationData != null) && metadata.locationData.lat !== 0) {
      if (1 > this.milesBetweenCoords(metadata.locationData.lat, metadata.locationData.lng, record.get('locationLat'), record.get('locationLng'))) {
        if ((metadata['{Exif}'] != null) || (metadata['Exif'] != null)) {
          if ((_ref = metadata['{Exif}']) == null) {
            metadata['{Exif}'] = metadata['Exif'];
          }
          eventDateTimeStart = new Date(record.get('dateTimeStart').getTime() - (12 * 60 * 60 * 1000));
          eventDateTimeEnd = new Date(record.get('dateTimeEnd').getTime() + (12 * 60 * 60 * 1000));
          metadataDateTime = null;
          if ((metadata['{Exif}']['DateTimeOriginal'] != null) && metadata['{Exif}']['DateTimeOriginal'] !== '0000-00-00 00:00:00') {
            metadataDateTime = metadata['{Exif}']['DateTimeOriginal'];
          } else if ((metadata['{Exif}']['DateTimeDigitized'] != null) && metadata['{Exif}']['DateTimeDigitized'] !== '0000-00-00 00:00:00') {
            metadataDateTime = metadata['{Exif}']['DateTimeDigitized'];
          }
          if (metadataDateTime != null) {
            metadataDateTimeDateObj = new Date(metadataDateTime.replace(' ', 'T'));
            return eventDateTimeStart < metadataDateTimeDateObj && eventDateTimeEnd > metadataDateTimeDateObj;
          } else {
            return true;
          }
        } else {
          return true;
        }
      } else {
        return false;
      }
    }
    if ((metadata['{Exif}'] != null) || (metadata['Exif'] != null)) {
      if ((_ref1 = metadata['{Exif}']) == null) {
        metadata['{Exif}'] = metadata['Exif'];
      }
      eventDateTimeStart = new Date(record.get('dateTimeStart').getTime() - (12 * 60 * 60 * 1000));
      eventDateTimeEnd = new Date(record.get('dateTimeEnd').getTime() + (12 * 60 * 60 * 1000));
      metadataDateTime = null;
      if ((metadata['{Exif}']['DateTimeOriginal'] != null) && metadata['{Exif}']['DateTimeOriginal'] !== '0000-00-00 00:00:00') {
        metadataDateTime = metadata['{Exif}']['DateTimeOriginal'];
      } else if ((metadata['{Exif}']['DateTimeDigitized'] != null) && metadata['{Exif}']['DateTimeDigitized'] !== '0000-00-00 00:00:00') {
        metadataDateTime = metadata['{Exif}']['DateTimeDigitized'];
      }
      if (metadataDateTime != null) {
        metadataDateTimeDateObj = new Date(metadataDateTime.replace(' ', 'T'));
        return eventDateTimeStart < metadataDateTimeDateObj && eventDateTimeEnd > metadataDateTimeDateObj;
      } else {
        return true;
      }
    } else {
      return true;
    }
  },
  determineTargetEid: function(imageURI, metadata, mediumURI, thumbURI, mid) {
    var ctrl, mediaType, _ref, _ref1;
    if (metadata == null) {
      metadata = null;
    }
    if (mediumURI == null) {
      mediumURI = null;
    }
    if (thumbURI == null) {
      thumbURI = null;
    }
    if (mid == null) {
      mid = null;
    }
    ctrl = this;
    if ((localStorage.getItem('locationLat') != null) && (localStorage.getItem('locationLng') != null)) {
      mediaType = (_ref = (_ref1 = ctrl.mediaAddQueue['' + mid]) != null ? _ref1['mediaType'] : void 0) != null ? _ref : 'photo';
      return Ext.Ajax.request({
        url: "http://wesawit.com/event/determine_target_eid",
        method: 'GET',
        params: {
          'timestampTaken': ctrl.convertDateToMySqlFormat(new Date()),
          'locationLatOfMedia': localStorage.getItem('locationLat'),
          'locationLngOfMedia': localStorage.getItem('locationLng')
        },
        success: function(response) {
          var askAddToPanel, confFn, entry, mediaInQueue, mediaStrip, obj, record, suggestedEventsList, _ref2;
          obj = Ext.decode(response.responseText);
          if (obj.success) {
            if (obj.determinationType === 'certain') {
              record = Ext.create('WSI.model.Event', obj.events[0]);
              ctrl.onViewEventCommand(null, record);
              mediaStrip = ctrl.getMediaWall();
              entry = {
                id: mid,
                aeid: record.get('id'),
                event_id: record.get('id'),
                worthinessCount: 0,
                deemed_worthy_by_me: false,
                flagCount: 0,
                flagged_by_me: false,
                author: window.localStorage.getItem('username'),
                authorUid: window.localStorage.getItem('uid'),
                url: imageURI != null ? imageURI : 'resources/images/placeholder.jpg',
                thumbUrl: thumbURI != null ? thumbURI : 'resources/images/placeholder.jpg',
                mediumUrl: mediumURI != null ? mediumURI : 'resources/images/placeholder.jpg',
                status: 'uploading',
                timestampTaken: (_ref2 = ctrl.getDateTimeFromMetadata(metadata, true)) != null ? _ref2 : new Date()
              };
              if (mediaType === 'photo') {
                entry.pid = mid;
                entry.vid = null;
              } else {
                entry.pid = null;
                entry.vid = mid;
              }
              if (ctrl.getEventDetailsContainer() != null) {
                ctrl.getEventDetailsContainer().media.unshift(entry);
                ctrl.getEventDetailsContainer().getAt(2).getStore().setData(ctrl.getEventDetailsContainer().media);
                mediaStrip.refreshItemTpl();
                mediaStrip.refresh();
              }
              mediaInQueue = ctrl.mediaAddQueue['' + mid];
              if (mediaInQueue['mediaType'] === 'photo' && mediaInQueue['econ_status'] === 'loaded' && mediaInQueue['medium_status'] === 'loaded' && mediaInQueue['thumb_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
                ctrl.addMedia(record, mid, mediaType, metadata, mediaInQueue['fileExt']);
              } else if (mediaInQueue['mediaType'] === 'video' && mediaInQueue['video_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
                ctrl.addMedia(record, mid, mediaType, metadata, mediaInQueue['fileExt']);
              } else {
                mediaInQueue['targetEventRecord'] = record;
                mediaInQueue['metadata'] = metadata;
              }
              return Ext.Viewport.setMasked(false);
            } else if (obj.events.length === 0) {
              confFn = function(buttonIndex) {
                Ext.Viewport.setMasked(false);
                if (buttonIndex === 2) {
                  ctrl.setUploadMediaFileUponNextViewEvent({
                    'imageURI': imageURI,
                    'mediaType': mediaType,
                    'metadata': metadata,
                    'thumbURI': thumbURI,
                    'mid': mid
                  });
                  return ctrl.showNewEventForm();
                } else {
                  ctrl.mediaAddQueue['' + mid]['canceled'] = true;
                  if (ctrl.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown != null) {
                    return ctrl.getEventsListContainer().getTabBar().setActiveTab(ctrl.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown);
                  }
                }
              };
              return navigator.notification.confirm('', confFn, 'No events happening around you.', 'Cancel,Create Event');
            } else {
              suggestedEventsList = {
                xtype: 'eventslist',
                itemHeight: 125,
                store: Ext.create('Ext.data.Store', {
                  model: 'WSI.model.Event',
                  data: obj.events
                }),
                emptyText: 'No events near you right now.',
                flex: 1,
                plugins: false,
                style: {
                  background: '#f0f0f0',
                  borderRadius: '4px',
                  paddingTop: '5px',
                  padding: '0px 0px 10px 0px',
                  margin: '5px 0px 0px 0px'
                },
                listeners: {
                  itemtap: function(list, index, target, record, e, eOpts) {
                    var _ref3;
                    ctrl.revertTopToolbarTitle();
                    ctrl.getTopToolbarHomeButton().show();
                    ctrl.getMainContainer().remove(ctrl.getAskAddToPanel(), true);
                    ctrl.onViewEventCommand(null, record);
                    mediaStrip = ctrl.getMediaWall();
                    entry = {
                      id: mid,
                      aeid: record.get('id'),
                      event_id: record.get('id'),
                      worthinessCount: 0,
                      deemed_worthy_by_me: false,
                      flagCount: 0,
                      flagged_by_me: false,
                      author: window.localStorage.getItem('username'),
                      authorUid: window.localStorage.getItem('uid'),
                      url: imageURI != null ? imageURI : 'resources/images/placeholder.jpg',
                      thumbUrl: thumbURI != null ? thumbURI : 'resources/images/placeholder.jpg',
                      mediumUrl: mediumURI != null ? mediumURI : 'resources/images/placeholder.jpg',
                      status: 'uploading',
                      timestampTaken: (_ref3 = ctrl.getDateTimeFromMetadata(metadata, true)) != null ? _ref3 : new Date()
                    };
                    if (mediaType === 'photo') {
                      entry.pid = mid;
                      entry.vid = null;
                    } else {
                      entry.pid = null;
                      entry.vid = mid;
                    }
                    if (ctrl.getEventDetailsContainer() != null) {
                      ctrl.getEventDetailsContainer().media.unshift(entry);
                      ctrl.getEventDetailsContainer().getAt(2).getStore().setData(ctrl.getEventDetailsContainer().media);
                      mediaStrip.refreshItemTpl();
                      mediaStrip.refresh();
                    }
                    mediaInQueue = ctrl.mediaAddQueue['' + mid];
                    if (mediaInQueue['mediaType'] === 'photo' && mediaInQueue['econ_status'] === 'loaded' && mediaInQueue['medium_status'] === 'loaded' && mediaInQueue['thumb_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
                      ctrl.addMedia(record, mid, mediaType, metadata, mediaInQueue['fileExt']);
                    } else if (mediaInQueue['mediaType'] === 'video' && mediaInQueue['video_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
                      ctrl.addMedia(record, mid, mediaType, metadata, mediaInQueue['fileExt']);
                    } else {
                      mediaInQueue['targetEventRecord'] = record;
                      mediaInQueue['metadata'] = metadata;
                    }
                    return Ext.Viewport.setMasked(false);
                  }
                }
              };
              askAddToPanel = {
                xtype: 'panel',
                id: 'askaddtopanel',
                cls: 'ask-panel-list',
                style: 'border-radius:0px;background:#444;',
                fullscreen: true,
                layout: 'vbox',
                modal: true,
                top: 0,
                width: '100%',
                height: '100%',
                pack: 'center',
                align: 'center',
                items: [
                  {
                    xtype: 'component',
                    flex: 0,
                    docked: 'top',
                    html: '<strong style="font-weight:bold;">Choose an event below to add your ' + mediaType + ' to:</strong>',
                    padding: '5 0 5 0',
                    style: 'font-size: 14px; color: white;'
                  }, {
                    xtype: 'container',
                    style: {
                      background: '#f0f0f0',
                      borderRadius: '4px'
                    },
                    layout: 'vbox',
                    flex: 1,
                    padding: '0 0 4 0',
                    items: [suggestedEventsList]
                  }, {
                    xtype: 'container',
                    padding: '10 0 5 0',
                    flex: 0,
                    height: 62,
                    layout: 'hbox',
                    pack: 'center',
                    items: [
                      {
                        xtype: 'component',
                        flex: 0,
                        padding: '0 10 0 0',
                        html: '<div class="form-group-toggle">Cancel</div>',
                        listeners: {
                          tap: {
                            element: 'element',
                            fn: function(e) {
                              if (ctrl.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown != null) {
                                ctrl.getEventsListContainer().getTabBar().setActiveTab(ctrl.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown);
                              }
                              return ctrl.getMainContainer().remove(ctrl.getAskAddToPanel(), true);
                            }
                          }
                        }
                      }, {
                        xtype: 'component',
                        flex: 1,
                        html: '<div class="form-group-toggle" style="text-align:center;">Or, create an event</div>',
                        listeners: {
                          tap: {
                            element: 'element',
                            fn: function(e) {
                              ctrl.getMainContainer().remove(ctrl.getAskAddToPanel(), true);
                              ctrl.setUploadMediaFileUponNextViewEvent({
                                'imageURI': imageURI,
                                'mediaType': mediaType,
                                'metadata': metadata,
                                'thumbURI': thumbURI,
                                'mid': mid
                              });
                              return ctrl.showNewEventForm();
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              };
              ctrl.getTopToolbar().addCls('hide-logo');
              ctrl.getTopToolbar().setTitle("<div class='full-title'>Add " + mediaType + "</div>");
              ctrl.getMainContainer().add(askAddToPanel);
              return Ext.Viewport.setMasked(false);
            }
          } else {
            return navigator.notification.alert('Error #537.', (function() {}), 'Error');
          }
        },
        failure: function(response) {
          return navigator.notification.alert('Connection error. Please try again or upload using the Upload button on an event page.', (function() {}), 'Error');
        }
      });
    } else {
      navigator.notification.alert('GPS Location is required to add media. Please go to your home screen and choose Settings -> Privacy -> Location Services. On that page, make sure the "Location Services" is ON and "WeSawIt" is ON.', (function() {}), 'Oops!');
      if (ctrl.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown != null) {
        ctrl.getEventsListContainer().getTabBar().setActiveTab(ctrl.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown);
      }
      return ctrl.mediaAddQueue['' + mid]['canceled'] = true;
    }
  },
  initCaptureMedia: function() {
    var captureMediaSuccessCallback, errorCallback;
    if (!(window.localStorage.getItem('wsitoken') != null)) {
      this.getTopToolbarHomeButton().setHidden(true);
      this.getEventsListContainer().setActiveItem(3);
      this.getMainContainer().setActiveItem(0);
      return navigator.notification.alert('', (function() {}), 'Please log in');
    } else {
      Ext.Viewport.setMasked({
        xtype: 'loadmask',
        message: ''
      });
      this.grabCurrentPosition();
      captureMediaSuccessCallback = Ext.bind(this.captureMediaSuccess, this);
      errorCallback = Ext.bind(this.captureError, this);
      if (Ext.os.is.Android) {
        this.pauseDueToPluginIntent = true;
      }
      return navigator.device.capture.captureVideo(captureMediaSuccessCallback, errorCallback, {
        limit: 1
      });
    }
  },
  openMediaLibrary: function(skipDetermineTargetId) {
    var errorCallback, librarySuccessCallback;
    if (skipDetermineTargetId == null) {
      skipDetermineTargetId = false;
    }
    if (!(window.localStorage.getItem('wsitoken') != null)) {
      this.getTopToolbarHomeButton().setHidden(true);
      this.getEventsListContainer().setActiveItem(3);
      this.getMainContainer().setActiveItem(0);
      return navigator.notification.alert('', (function() {}), 'Please log in');
    } else {
      Ext.Viewport.setMasked({
        xtype: 'loadmask',
        message: ''
      });
      this.grabCurrentPosition();
      librarySuccessCallback = Ext.bind(this.captureLibrarySuccess, this);
      errorCallback = Ext.bind(this.captureError, this);
      if (Ext.os.is.Android) {
        this.pauseDueToPluginIntent = true;
      }
      return navigator.camera.getPicture(librarySuccessCallback, errorCallback, {
        quality: 20,
        correctOrientation: true,
        sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
        mediaType: Camera.MediaType.ALLMEDIA,
        destinationType: Camera.DestinationType.FILE_URI
      });
    }
  },
  captureMediaSuccess: function(mediaFiles) {
    var file, i, indexToRemove, m, media, mediaInQueue, mediaType, medias, mid, percentComplete, _base, _name, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
    _results = [];
    for (i in mediaFiles) {
      file = mediaFiles[i];
      if ((_ref = (_base = this.mediaAddQueue)[_name = '' + file.mid]) == null) {
        _base[_name] = {};
      }
      mid = file.mid;
      mediaType = file.mediaType;
      mediaInQueue = this.mediaAddQueue['' + file.mid];
      if ((_ref1 = mediaInQueue['mediaType']) == null) {
        mediaInQueue['mediaType'] = file.mediaType;
      }
      if (!(this.blacklistedMids != null) || !(this.blacklistedMids[mid] != null) || !this.blacklistedMids[mid]) {
        if (mediaInQueue['mediaType'] === 'video' && (file.fileExt != null)) {
          mediaInQueue['fileExt'] = file.fileExt;
        }
        if (file.status === 'loaded') {
          mediaInQueue['econ_status'] = 'loaded';
          mediaInQueue['video_status'] = 'loaded';
        }
        if (file.statusMedium === 'loaded') {
          mediaInQueue['medium_status'] = 'loaded';
        }
        if (file.statusThumb === 'loaded') {
          mediaInQueue['thumb_status'] = 'loaded';
        }
        if (file.typeOfPluginResult === 'initialRecordInformer') {
          if (mediaInQueue['mediaType'] === 'photo') {
            _results.push(this.determineTargetEid(file.filePath, null, file.filePathMedium, file.filePathThumb, file.mid));
          } else if (mediaInQueue['mediaType'] === 'video') {
            _results.push(this.determineTargetEid(file.filePathMedium, null, file.filePathMedium, file.filePathThumb, file.mid));
          } else {
            _results.push(void 0);
          }
        } else if (file.typeOfPluginResult === 'progress') {
          if (file.uploadType === 'main') {
            percentComplete = Math.floor(100 * parseInt(file.totalBytesWritten) / parseInt(file.totalBytesExpectedToWrite));
            _results.push((_ref2 = document.getElementById("progress-bar-" + mid)) != null ? _ref2.style.width = "" + percentComplete + "%" : void 0);
          } else {
            _results.push(void 0);
          }
        } else if (file.typeOfPluginResult === 'success') {
          if (mediaInQueue['targetEventRecord'] != null) {
            if (mediaInQueue['mediaType'] === 'photo' && mediaInQueue['econ_status'] === 'loaded' && mediaInQueue['medium_status'] === 'loaded' && mediaInQueue['thumb_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
              _results.push(this.addMedia(mediaInQueue['targetEventRecord'], file.mid, mediaInQueue['mediaType'], null, mediaInQueue['fileExt']));
            } else if (mediaInQueue['mediaType'] === 'video' && mediaInQueue['video_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
              _results.push(this.addMedia(mediaInQueue['targetEventRecord'], file.mid, mediaInQueue['mediaType'], null, mediaInQueue['fileExt']));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        } else if (file.typeOfPluginResult === 'failure') {
          if ((_ref3 = this.blacklistedMids) == null) {
            this.blacklistedMids = {};
          }
          this.blacklistedMids[mid] = true;
          navigator.notification.alert("Sorry, " + mediaType + " upload failed.", (function() {}), 'Oops!');
          if (this.getEventDetailsContainer() != null) {
            medias = this.getEventDetailsContainer().media;
            indexToRemove = null;
            for (m in medias) {
              media = medias[m];
              if (media.id === mid) {
                indexToRemove = m;
              }
            }
            if (indexToRemove != null) {
              this.getEventDetailsContainer().media.splice(indexToRemove, 1);
              this.getEventDetailsContainer().getAt(2).getStore().setData(this.getEventDetailsContainer().media);
              if ((_ref4 = this.getMediaWall()) != null) {
                _ref4.refreshItemTpl();
              }
              _results.push((_ref5 = this.getMediaWall()) != null ? _ref5.refresh() : void 0);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  },
  captureLibrarySuccess: function(mediaFiles) {
    var entry, file, i, indexToRemove, m, media, mediaInQueue, mediaStrip, mediaType, medias, metadata, mid, percentComplete, _base, _name, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results;
    Ext.Viewport.setMasked(false);
    _results = [];
    for (i in mediaFiles) {
      file = mediaFiles[i];
      if ((_ref = (_base = this.mediaAddQueue)[_name = '' + file.mid]) == null) {
        _base[_name] = {};
      }
      mid = file.mid;
      mediaType = file.mediaType;
      mediaInQueue = this.mediaAddQueue['' + file.mid];
      if ((_ref1 = mediaInQueue['mediaType']) == null) {
        mediaInQueue['mediaType'] = file.mediaType;
      }
      if ((_ref2 = mediaInQueue['targetEventRecord']) == null) {
        mediaInQueue['targetEventRecord'] = ((_ref3 = this.getEventDetailsContainer()) != null ? _ref3.getEventRecord() : void 0) || this.tempRecordOfNewEvent;
      }
      if (!(mediaInQueue['targetEventRecord'] != null)) {
        _results.push(console.log('captureLibrarySuccess error: record is not defined ~line #905'));
      } else {
        if (!(this.blacklistedMids != null) || !(this.blacklistedMids[mid] != null) || !this.blacklistedMids[mid]) {
          if (mediaInQueue['mediaType'] === 'video' && (file.fileExt != null)) {
            mediaInQueue['fileExt'] = file.fileExt;
          }
          if (file.status === 'loaded') {
            mediaInQueue['econ_status'] = 'loaded';
            mediaInQueue['video_status'] = 'loaded';
          }
          if (file.statusMedium === 'loaded') {
            mediaInQueue['medium_status'] = 'loaded';
          }
          if (file.statusThumb === 'loaded') {
            mediaInQueue['thumb_status'] = 'loaded';
          }
          if (file.metadataJson != null) {
            metadata = Ext.decode(file.metadataJson);
          }
          if (file.metadataDateTime != null) {
            metadata = {};
            metadata['{Exif}'] = {};
            metadata['{Exif}']['DateTimeOriginal'] = file.metadataDateTime;
            metadata['{Exif}']['DateTimeDigitized'] = file.metadataDateTime;
          }
          if (!(metadata != null) || this.isMetadataOk(metadata, mediaInQueue['targetEventRecord'])) {
            if (file.typeOfPluginResult === 'initialRecordInformer') {
              mediaStrip = this.getMediaWall();
              entry = {
                id: mid,
                pid: null,
                vid: null,
                aeid: mediaInQueue['targetEventRecord'].get('id'),
                event_id: mediaInQueue['targetEventRecord'].get('id'),
                worthinessCount: 0,
                deemed_worthy_by_me: false,
                flagCount: 0,
                flagged_by_me: false,
                author: window.localStorage.getItem('username'),
                authorUid: window.localStorage.getItem('uid'),
                url: (_ref4 = file.filePath) != null ? _ref4 : 'resources/images/placeholder.jpg',
                thumbUrl: (_ref5 = file.filePathThumb) != null ? _ref5 : 'resources/images/placeholder.jpg',
                mediumUrl: (_ref6 = file.filePathMedium) != null ? _ref6 : 'resources/images/placeholder.jpg',
                status: 'uploading',
                timestampTaken: (_ref7 = this.getDateTimeFromMetadata(metadata, true)) != null ? _ref7 : new Date()
              };
              if (mediaType === 'photo') {
                entry.pid = mid;
                entry.vid = null;
              } else {
                entry.pid = null;
                entry.vid = mid;
              }
              if (this.getEventDetailsContainer() != null) {
                this.getEventDetailsContainer().media.unshift(entry);
                this.getEventDetailsContainer().getAt(2).getStore().setData(this.getEventDetailsContainer().media);
                mediaStrip.refreshItemTpl();
                _results.push(mediaStrip.refresh());
              } else {
                _results.push(void 0);
              }
            } else if (file.typeOfPluginResult === 'progress') {
              if (file.uploadType === 'main') {
                percentComplete = Math.floor(100 * parseInt(file.totalBytesWritten) / parseInt(file.totalBytesExpectedToWrite));
                _results.push((_ref8 = document.getElementById("progress-bar-" + mid)) != null ? _ref8.style.width = "" + percentComplete + "%" : void 0);
              } else {
                _results.push(void 0);
              }
            } else if (file.typeOfPluginResult === 'success') {
              if (mediaInQueue['mediaType'] === 'photo' && mediaInQueue['econ_status'] === 'loaded' && mediaInQueue['medium_status'] === 'loaded' && mediaInQueue['thumb_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
                _results.push(this.addMedia(mediaInQueue['targetEventRecord'], file.mid, mediaInQueue['mediaType'], null, mediaInQueue['fileExt']));
              } else if (mediaInQueue['mediaType'] === 'video' && mediaInQueue['video_status'] === 'loaded' && mediaInQueue['canceled'] !== true) {
                _results.push(this.addMedia(mediaInQueue['targetEventRecord'], file.mid, mediaInQueue['mediaType'], null, mediaInQueue['fileExt']));
              } else {
                _results.push(void 0);
              }
            } else if (file.typeOfPluginResult === 'failure') {
              if ((_ref9 = this.blacklistedMids) == null) {
                this.blacklistedMids = {};
              }
              this.blacklistedMids[mid] = true;
              navigator.notification.alert("Sorry, " + mediaType + " upload failed.", (function() {}), 'Oops!');
              if (this.getEventDetailsContainer() != null) {
                medias = this.getEventDetailsContainer().media;
                indexToRemove = null;
                for (m in medias) {
                  media = medias[m];
                  if (media.id === mid) {
                    indexToRemove = m;
                  }
                }
                if (indexToRemove != null) {
                  this.getEventDetailsContainer().media.splice(indexToRemove, 1);
                  this.getEventDetailsContainer().getAt(2).getStore().setData(this.getEventDetailsContainer().media);
                  if ((_ref10 = this.getMediaWall()) != null) {
                    _ref10.refreshItemTpl();
                  }
                  _results.push((_ref11 = this.getMediaWall()) != null ? _ref11.refresh() : void 0);
                } else {
                  _results.push(void 0);
                }
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          } else {
            if ((_ref12 = this.blacklistedMids) == null) {
              this.blacklistedMids = {};
            }
            this.blacklistedMids[mid] = true;
            _results.push(navigator.notification.alert("Sorry, that " + mediaType + " doesn't seem to be of this event.", (function() {}), 'Oops!'));
          }
        } else {
          _results.push(void 0);
        }
      }
    }
    return _results;
  },
  captureError: function(error) {
    var ctrl;
    ctrl = this;
    if (ctrl.getBrowseTab().getActiveItem() === ctrl.getEventDetailsContainer()) {
      ctrl.getTopToolbarHomeButton().show();
      ctrl.revertTopToolbarTitle();
    } else {
      ctrl.resetTopToolbarTitle();
      if (ctrl.getEventsListContainer().getActiveItem() === ctrl.getBrowseTab()) {
        ctrl.showCreateEventButton();
      }
    }
    if (this.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown != null) {
      this.getEventsListContainer().getTabBar().setActiveTab(this.getEventsListContainer().config.lastActiveTabBeforeCaptureActionSheetShown);
    }
    Ext.Viewport.setMasked(false);
    if ((error.code != null) && error.code !== '3' && error.code !== 3) {
      return navigator.notification.alert("Unable to use camera.", (function() {}), 'Oops!');
    }
  },
  getDateTimeFromMetadata: function(metadata, asDateObj) {
    var metadataDateTime, _ref;
    if (asDateObj == null) {
      asDateObj = false;
    }
    if ((metadata != null) && ((metadata['{Exif}'] != null) || (metadata['Exif'] != null))) {
      if ((_ref = metadata['{Exif}']) == null) {
        metadata['{Exif}'] = metadata['Exif'];
      }
      if ((metadata['{Exif}']['DateTimeOriginal'] != null) && metadata['{Exif}']['DateTimeOriginal'] !== '0000-00-00 00:00:00') {
        metadataDateTime = metadata['{Exif}']['DateTimeOriginal'];
      } else if ((metadata['{Exif}']['DateTimeDigitized'] != null) && metadata['{Exif}']['DateTimeDigitized'] !== '0000-00-00 00:00:00') {
        metadataDateTime = metadata['{Exif}']['DateTimeDigitized'];
      }
      if ((metadataDateTime != null) && asDateObj) {
        return new Date(metadataDateTime.replace(' ', 'T'));
      } else {
        return metadataDateTime;
      }
    } else {
      return null;
    }
  },
  addMedia: function(targetRecord, mid, mediaType, metadata, fileExt) {
    var ajaxParams, _ref;
    if (metadata == null) {
      metadata = null;
    }
    if (fileExt == null) {
      fileExt = '';
    }
    ajaxParams = {
      token: window.localStorage.getItem('wsitoken'),
      uid: window.localStorage.getItem('uid'),
      file_ext: fileExt,
      api_version: util.API_VERSION
    };
    ajaxParams["" + mediaType + "_id"] = mid;
    if (((metadata != null ? metadata.locationData : void 0) != null) && metadata.locationData.lat !== 0) {
      ajaxParams.locationLat = metadata.locationData.lat;
      ajaxParams.locationLng = metadata.locationData.lng;
    } else {
      ajaxParams.locationLat = window.localStorage.getItem('locationLat') != null ? window.localStorage.getItem('locationLat') : '0';
      ajaxParams.locationLng = window.localStorage.getItem('locationLng') != null ? window.localStorage.getItem('locationLng') : '0';
    }
    ajaxParams.timestampTaken = this.convertDateToMySqlFormat((_ref = this.getDateTimeFromMetadata(metadata, true)) != null ? _ref : new Date());
    return Ext.Ajax.request({
      url: "http://wesawit.com/event/add_" + mediaType + "/" + (targetRecord.get('id')),
      method: 'GET',
      params: ajaxParams,
      scope: this,
      success: function(response, opts) {
        var indexToRemove, m, media, medias, obj, _ref1, _ref2, _ref3, _ref4, _ref5;
        obj = Ext.decode(response.responseText);
        if (obj.success) {
          if (mediaType === 'photo') {
            if ((_ref1 = this.getMediaWall()) != null) {
              if ((_ref2 = _ref1.getStore()) != null) {
                if ((_ref3 = _ref2.getById(mid)) != null) {
                  _ref3.set('status', 'loaded');
                }
              }
            }
            if ((_ref4 = this.getMediaWall()) != null) {
              _ref4.refresh();
            }
            return targetRecord.set('outdated', true);
          } else if (mediaType === 'video') {
            if (this.getEventDetailsContainer() != null) {
              medias = (_ref5 = this.getEventDetailsContainer().media) != null ? _ref5 : new Array();
              indexToRemove = null;
              for (m in medias) {
                media = medias[m];
                if (media.id === mid) {
                  indexToRemove = m;
                }
              }
              if (indexToRemove != null) {
                this.getEventDetailsContainer().media.splice(indexToRemove, 1);
                if (this.getEventDetailsContainer().media.length === 0) {
                  this.getEventDetailsContainer().getAt(2).getStore().removeAll();
                } else {
                  this.getEventDetailsContainer().getAt(2).getStore().setData(this.getEventDetailsContainer().media);
                }
                this.getMediaWall().refreshItemTpl();
                this.getMediaWall().refresh();
              }
            }
            targetRecord.set('outdated', true);
            return navigator.notification.alert('Your video has been uploaded, but it may take a minute before everyone can see it.', (function() {}), 'Video Uploaded');
          }
        } else {
          return navigator.notification.alert('Sorry, upload failed. Please log out and then log back in and try again.', (function() {}), 'Oops!');
        }
      },
      failure: function(response, opts) {
        var obj;
        obj = Ext.decode(response.responseText);
        return navigator.notification.alert('Sorry, upload failed. Please log out and then log back in and try again.', (function() {}), 'Oops!');
      }
    });
  },
  openWhosThere: function(record) {
    var whosThereContainer;
    whosThereContainer = Ext.create('WSI.view.WhosThereContainer');
    whosThereContainer.changeWhosThere(record);
    this.getTopToolbarHomeButton().config.dest = 'to-details-from-whosthere';
    return this.getBrowseTab().setActiveItem(whosThereContainer);
  },
  showNewEventForm: function() {
    var createEventForm, _ref, _ref1, _ref2, _ref3;
    if (window.localStorage.getItem('wsitoken') != null) {
      this.grabCurrentPosition();
      if ((_ref = this.getCreateEventButton()) != null) {
        _ref.hide();
      }
      if ((_ref1 = this.getTopToolbarHomeButton()) != null) {
        _ref1.hide();
      }
      if ((_ref2 = this.getMoreActionsButton()) != null) {
        _ref2.hide();
      }
      if ((_ref3 = this.getTopToolbarHomeButton()) != null) {
        _ref3.config.dest = 'to-home-from-create';
      }
      this.getTopToolbar().addCls('hide-logo');
      this.getTopToolbar().setTitle("<div class='full-title'>New Event</div>");
      if (this.getCreateEventForm() != null) {
        this.getMainContainer().remove(this.getCreateEventForm(), true);
      }
      createEventForm = Ext.create('WSI.view.CreateEventForm');
      this.populateUi();
      return this.getMainContainer().setActiveItem(createEventForm);
    } else {
      this.getTopToolbarHomeButton().setHidden(true);
      this.getEventsListContainer().setActiveItem(3);
      this.getMainContainer().setActiveItem(0);
      return navigator.notification.alert('', (function() {}), 'Please log in');
    }
  },
  createEventFormSubmit: function() {
    var event, that;
    event = this.getCreateEventForm().config.eventData;
    if (event.title === '') {
      navigator.notification.alert('"Title" is a required field.', (function() {}), 'Oops!');
      return;
    }
    if (event.locationName === '' || event.locationName === 'Loading...' || event.locationName === '<div class="x-loading-spinner-outer" style="margin-top: 0px;"><div class="x-loading-spinner" style="margin: 0px auto; font-size: 18px !important;"><span class="x-loading-top"></span><span class="x-loading-right"></span><span class="x-loading-bottom"></span><span class="x-loading-left"></span></div></div>') {
      navigator.notification.alert('"Where" is a required field.', (function() {}), 'Oops!');
      return;
    }
    if (event.dateTimeStart === '') {
      navigator.notification.alert('"When" is a required field.', (function() {}), 'Oops!');
      return;
    }
    Ext.Viewport.setMasked({
      xtype: 'loadmask',
      message: ''
    });
    if (event.reference !== '' && (event.locationLat === '0' || event.locationLng === '0' || !(event.locationType != null) || event.locationType === '')) {
      if (!(document.placesService != null)) {
        document.placesService = new google.maps.places.PlacesService(document.getElementsByClassName('x-map')[0]);
      }
      that = this;
      return document.placesService.getDetails({
        'reference': event.reference
      }, function(placeResult, placeServiceStatus) {
        var _ref;
        if (placeServiceStatus === google.maps.places.PlacesServiceStatus.OK && (((_ref = placeResult.geometry) != null ? _ref.location : void 0) != null)) {
          event.locationLat = placeResult.geometry.location.lat();
          event.locationLng = placeResult.geometry.location.lng();
          event.locationType = placeResult.types[0];
          return that.checkIfEventExists(event);
        }
      });
    } else {
      return this.checkIfEventExists(event);
    }
  },
  checkIfEventExists: function(event) {
    var country, ctrl, dateTimeEnd, dateTimeStart;
    ctrl = this;
    if (event.locationLat !== '0' && event.locationLng !== '0') {
      country = 'within:1:of:' + event.locationLat + ':' + event.locationLng;
    } else {
      country = 'world';
    }
    dateTimeStart = new Date(event.dateTimeStart.getTime());
    dateTimeEnd = new Date(event.dateTimeEnd.getTime());
    dateTimeStart.setHours(dateTimeStart.getHours() - 12);
    dateTimeEnd.setHours(dateTimeEnd.getHours() + 12);
    return Ext.Ajax.request({
      url: 'http://wesawit.com/event/get_events_mobile',
      params: {
        'start': 0,
        'limit': 3,
        'searchTerm': event.title + ' ' + event.description + ' ' + event.locationName,
        'dateTimeStart': dateTimeStart,
        'dateTimeEnd': dateTimeEnd,
        'country': country,
        'sort': 'custom_range'
      },
      timeout: 30000,
      method: 'GET',
      success: function(response) {
        var askAlreadyExistsPanel, eventsListAlreadyExists, resp;
        resp = Ext.JSON.decode(response.responseText);
        if (resp.events.length === 0) {
          return ctrl.createEvent(event);
        } else {
          eventsListAlreadyExists = {
            xtype: 'eventslist',
            itemHeight: 159,
            flex: 1,
            plugins: false,
            store: {
              data: resp.events,
              model: 'WSI.model.Event'
            },
            emptyText: 'Nothing here.',
            style: {
              background: '#f0f0f0',
              borderRadius: '4px',
              paddingTop: '5px',
              padding: '0px 0px 10px 0px',
              margin: '5px 0px 0px 0px'
            },
            listeners: {
              itemtap: function(list, index, target, record, e, eOpts) {
                Ext.Viewport.setMasked(false);
                if (ctrl.getCreateEventForm() != null) {
                  ctrl.getMainContainer().remove(ctrl.getCreateEventForm(), true);
                }
                Ext.Viewport.remove(ctrl.getAskAlreadyExistsPanel(), true);
                return ctrl.onViewEventCommand(null, record);
              }
            }
          };
          askAlreadyExistsPanel = {
            xtype: 'panel',
            id: 'askalreadyexistspanel',
            cls: ['ask-panel-list', 'already-exists'],
            layout: 'vbox',
            modal: true,
            top: 0,
            width: '100%',
            height: '100%',
            pack: 'center',
            align: 'center',
            style: 'border-radius:0px;background:#444;',
            fullscreen: true,
            items: [
              {
                xtype: 'component',
                flex: 0,
                docked: 'top',
                html: '<div style="-webkit-mask-image:url(resources/images/warning_black.png);-webkit-mask-repeat:no-repeat;-webkit-mask-position: center right;-webkit-mask-size:60%;float:left;background-color:white;width:40px;height:40px;margin:-3px 13px 0px 0px"></div><strong style="font-weight:bold;">Hmm...<br />Does your event already exist?</strong>',
                padding: '5 0 5 0',
                style: 'font-size: 14px; color: white;'
              }, {
                xtype: 'container',
                flex: 1,
                style: {
                  background: '#f0f0f0',
                  borderRadius: '4px'
                },
                padding: '0 0 4 0',
                layout: 'vbox',
                items: [eventsListAlreadyExists]
              }, {
                xtype: 'container',
                docked: 'bottom',
                height: 50,
                padding: '10 0 5 0',
                layout: 'hbox',
                flex: 0,
                pack: 'center',
                items: [
                  {
                    xtype: 'container',
                    layout: 'vbox',
                    flex: 0,
                    padding: '0 10 0 0',
                    hidden: true,
                    html: '<div class="form-group-toggle">Cancel Post</div>',
                    listeners: {
                      tap: {
                        element: 'element',
                        fn: function(e) {
                          Ext.Viewport.setMasked(false);
                          Ext.Viewport.remove(ctrl.getAskAlreadyExistsPanel(), true);
                          ctrl.getTopToolbarHomeButton().config.dest = 'to-home-from-create';
                          return ctrl.onHomeButtonTap();
                        }
                      }
                    }
                  }, {
                    xtype: 'container',
                    layout: 'vbox',
                    flex: 1,
                    html: '<div class="form-group-toggle create">No, it\'s new. Continue posting it!<img src="resources/images/disclosure-white.png" width="11" height="15" /></div>',
                    listeners: {
                      tap: {
                        element: 'element',
                        fn: function(e) {
                          Ext.Viewport.setMasked(false);
                          Ext.Viewport.remove(ctrl.getAskAlreadyExistsPanel(), true);
                          return ctrl.createEvent(event);
                        }
                      }
                    }
                  }
                ]
              }
            ]
          };
          ctrl.getTopToolbarHomeButton().config.dest = 'to-create-from-alreadyexists';
          ctrl.getTopToolbarHomeButton().show();
          Ext.Viewport.setMasked(false);
          return Ext.Viewport.add(askAlreadyExistsPanel);
        }
      },
      failure: function() {
        navigator.notification.alert('Could not create event.', (function() {}), 'Oops!');
        return Ext.Viewport.setMasked(false);
      }
    });
  },
  twoDigits: function(d) {
    if (0 <= d && d < 10) {
      return "0" + d.toString();
    } else if (-10 < d && d < 0) {
      return "-0" + (-1 * d).toString();
    } else {
      return d.toString();
    }
  },
  convertDateToMySqlFormat: function(date) {
    if ((typeof date).toLowerCase() === 'object') {
      return date.getUTCFullYear() + "-" + this.twoDigits(1 + date.getUTCMonth()) + "-" + this.twoDigits(date.getUTCDate()) + " " + this.twoDigits(date.getUTCHours()) + ":" + this.twoDigits(date.getUTCMinutes()) + ":" + this.twoDigits(date.getUTCSeconds());
    } else {
      return navigator.notification.alert('Error converting date. Please notify us about this error at contact@wesawit.com. Sorry.', (function() {}), 'Oops!');
    }
  },
  createEvent: function(event) {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    Ext.Viewport.setMasked({
      xtype: 'loadmask',
      message: ''
    });
    return Ext.Ajax.request({
      url: 'http://wesawit.com/event/create',
      params: {
        'api_version': util.API_VERSION,
        'token': window.localStorage.getItem('wsitoken'),
        'uid': window.localStorage.getItem('uid'),
        'title': event.title,
        'description': event.description,
        'dateTimeStart': this.convertDateToMySqlFormat(event.dateTimeStart),
        'dateTimeEnd': this.convertDateToMySqlFormat((_ref = event.dateTimeEnd) != null ? _ref : event.dateTimeStart),
        'locationName': (_ref1 = event.locationName) != null ? _ref1 : '',
        'locationVicinity': (_ref2 = event.locationVicinity) != null ? _ref2 : '',
        'locationLat': (_ref3 = event.locationLat) != null ? _ref3 : '0',
        'locationLng': (_ref4 = event.locationLng) != null ? _ref4 : '0',
        'locationType': (_ref5 = event.locationType) != null ? _ref5 : '',
        'locationReference': (_ref6 = event.reference) != null ? _ref6 : '',
        'category': (_ref7 = event.category) != null ? _ref7 : '',
        'userLatAtTimeOfCreation': (_ref8 = window.localStorage.getItem('locationLat')) != null ? _ref8 : '0',
        'userLngAtTimeOfCreation': (_ref9 = window.localStorage.getItem('locationLng')) != null ? _ref9 : '0'
      },
      timeout: 30000,
      method: 'POST',
      scope: this,
      success: function(response) {
        var resp, _ref10, _ref11, _ref12, _ref13, _ref14;
        Ext.Viewport.setMasked(false);
        resp = Ext.JSON.decode(response.responseText);
        this.tempRecordOfNewEvent = Ext.create('WSI.model.Event', {
          'id': resp.event.event_id,
          'title': resp.event.title,
          'description': resp.event.description,
          'category': (_ref10 = resp.event.category) != null ? _ref10 : '',
          'dateTimeStart': resp.event.dateTimeStart,
          'dateTimeEnd': resp.event.dateTimeEnd,
          'locationName': (_ref11 = resp.event.locationName) != null ? _ref11 : '',
          'locationVicinity': (_ref12 = resp.event.locationVicinity) != null ? _ref12 : '',
          'locationLat': (_ref13 = resp.event.locationLat) != null ? _ref13 : '0',
          'locationLng': (_ref14 = resp.event.locationLng) != null ? _ref14 : '0',
          'viewCount': 0,
          'bookmarked_by_me': false,
          'flagged_by_me': false,
          'photos': resp.event.photos,
          'videos': resp.event.videos,
          'num_whosthere': resp.event.num_whosthere
        });
        this.onViewEventCommand(null, this.tempRecordOfNewEvent);
        return this.getMainContainer().remove(this.getCreateEventForm(), true);
      },
      failure: function(response) {
        var resp;
        Ext.Viewport.setMasked(false);
        resp = Ext.JSON.decode(response.responseText);
        return navigator.notification.alert(resp.error_message, (function() {}), 'Error');
      }
    });
  },
  newEventChooseLocation: function(locationName, locationVicinity, locationLat, locationLng, locationType, reference, autoPressHomeButton) {
    var _ref;
    if (locationVicinity == null) {
      locationVicinity = '';
    }
    if (locationLat == null) {
      locationLat = '0';
    }
    if (locationLng == null) {
      locationLng = '0';
    }
    if (locationType == null) {
      locationType = '';
    }
    if (reference == null) {
      reference = '';
    }
    if (autoPressHomeButton == null) {
      autoPressHomeButton = false;
    }
    if ((_ref = this.getCreateEventForm()) != null) {
      _ref.getItems().getAt(2).getItems().getAt(1).setData({
        'locationName': locationName,
        'locationVicinity': locationVicinity,
        'locationLat': locationLat,
        'locationLng': locationLng,
        'locationType': locationType,
        'reference': reference
      });
    }
    if (autoPressHomeButton === true) {
      return this.onHomeButtonTap();
    }
  },
  newEventChooseTimeInfo: function(dateTimeStart, dateTimeEnd, autoPressHomeButton) {
    if (dateTimeEnd == null) {
      dateTimeEnd = '';
    }
    if (autoPressHomeButton == null) {
      autoPressHomeButton = false;
    }
    this.getCreateEventForm().getItems().getAt(3).getItems().getAt(1).setData({
      'dateTimeStart': dateTimeStart,
      'dateTimeEnd': dateTimeEnd
    });
    if (autoPressHomeButton === true) {
      return this.onHomeButtonTap();
    }
  },
  populateUiForSearch: function() {
    var cat, _i, _len, _ref;
    if (this.getListOfCategories() != null) {
      this.categories = new Array();
      _ref = this.getListOfCategories();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cat = _ref[_i];
        this.categories.push({
          'text': cat,
          'value': cat
        });
      }
      this.categories.unshift({
        'text': 'All Categories',
        'value': 'all'
      });
      return this.getBrowseTab().getAt(0).getAt(1).getAt(0).getAt(0).getAt(1).setData(this.categories);
    }
  },
  populateUi: function() {
    var cat, _i, _len, _ref;
    if (this.getListOfCategories() != null) {
      this.categories = new Array();
      _ref = this.getListOfCategories();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cat = _ref[_i];
        this.categories.push({
          'text': cat,
          'value': cat
        });
      }
      return this.getCreateEventForm().getItems().getAt(5).getItems().getAt(0).setData(this.categories);
    }
  },
  deleteRecord: function(type, record, list) {
    var id;
    if (list == null) {
      list = null;
    }
    Ext.Viewport.setMasked({
      xtype: 'loadmask',
      message: ''
    });
    id = record.get('id');
    return Ext.Ajax.request({
      url: "http://wesawit.com/event/delete/" + id + "/" + type,
      method: 'POST',
      params: {
        'token': window.localStorage.getItem('wsitoken'),
        'uid': window.localStorage.getItem('uid')
      },
      success: function(response) {
        record.destroy();
        if (list != null) {
          list.refresh();
        }
        return Ext.Viewport.setMasked(false);
      },
      failure: function(response) {
        if ((response.timedout != null) && response.timedout) {
          navigator.notification.alert('Your internet connection seems to be going too slow.', (function() {}), 'Hmm...');
        } else {
          navigator.notification.alert('Could not be deleted.', (function() {}), 'Oops!');
        }
        return Ext.Viewport.setMasked(false);
      },
      scope: this
    });
  },
  likeMedia: function(type, target, mid, mediaRecord, tapListener) {
    var ctrl;
    ctrl = this;
    if (!(window.localStorage.getItem('wsitoken') != null)) {
      this.getTopToolbarHomeButton().setHidden(true);
      this.getEventsListContainer().setActiveItem(3);
      this.getMainContainer().setActiveItem(0);
      return this.getMainContainer().remove(this.getGallery(), true);
    } else {
      if (target.className.indexOf('liked') === -1 && target.className.indexOf('static-liked') === -1) {
        return Ext.Ajax.request({
          url: "http://wesawit.com/event/deem_worthy/" + mid + "/" + type,
          method: 'POST',
          params: {
            'token': window.localStorage.getItem('wsitoken'),
            'uid': window.localStorage.getItem('uid')
          },
          success: function(response) {
            var newCount, resp, _ref, _ref1;
            resp = Ext.decode(response.responseText);
            ctrl.on('tap', tapListener);
            if (resp.success) {
              target.className += ' liked';
              newCount = parseInt(target.nextSibling.textContent) + 1;
              target.nextSibling.textContent = newCount;
              mediaRecord.set('worthinessCount', newCount);
              mediaRecord.set('deemed_worthy_by_me', true);
              if ((_ref = this.getMediaWall()) != null) {
                _ref.refresh();
              }
              return (_ref1 = this.getMediaStrip()) != null ? _ref1.refresh() : void 0;
            } else if (resp.error_message != null) {
              return navigator.notification.alert('Session has expired, please log out and log in again.', (function() {}), 'Oops!');
            }
          },
          failure: function(response) {
            ctrl.on('tap', tapListener);
            if ((response.timedout != null) && response.timedout) {
              return navigator.notification.alert('Your internet connection seems to be going too slow.', (function() {}), 'Hmm...');
            } else {
              return navigator.notification.alert('Hmm... idk, you can try again later.', (function() {}), 'Oops!');
            }
          },
          scope: this
        });
      } else {
        return Ext.Ajax.request({
          url: "http://wesawit.com/event/deem_worthy/" + mid + "/" + type + "/true",
          method: 'POST',
          params: {
            'token': window.localStorage.getItem('wsitoken'),
            'uid': window.localStorage.getItem('uid')
          },
          success: function(response) {
            var newCount, resp, _ref, _ref1;
            resp = Ext.decode(response.responseText);
            ctrl.on('tap', tapListener);
            if (resp.success) {
              target.className = 'like-button';
              newCount = parseInt(target.nextSibling.textContent) - 1;
              target.nextSibling.textContent = newCount;
              mediaRecord.set('worthinessCount', newCount);
              mediaRecord.set('deemed_worthy_by_me', false);
              if ((_ref = this.getMediaWall()) != null) {
                _ref.refresh();
              }
              return (_ref1 = this.getMediaStrip()) != null ? _ref1.refresh() : void 0;
            } else if (resp.error_message != null) {
              return navigator.notification.alert('Session has expired, please log out and log in again.', (function() {}), 'Oops!');
            }
          },
          failure: function(response) {
            ctrl.on('tap', tapListener);
            if ((response.timedout != null) && response.timedout) {
              return navigator.notification.alert('Your internet connection seems to be going too slow.', (function() {}), 'Hmm...');
            } else {
              return navigator.notification.alert('Hmm... idk, you can try again later.', (function() {}), 'Oops!');
            }
          },
          scope: this
        });
      }
    }
  },
  shareMedia: function(ctrl, type, record, platform) {
    var dialogOptions, event, fbUrl, imageUrl, text, url;
    if (platform == null) {
      platform = 'facebook';
    }
    if (!navigator.onLine) {
      return navigator.notification.alert('Unable to connect to internet.', (function() {}), 'Oops!');
    } else {
      if (Ext.os.is.Android) {
        if (platform === 'facebook') {
          window.plugins.childBrowser.onLocationChange = function(url) {
            if (url.indexOf('redirect_uri') === -1 && (url.indexOf('%23closeChildBrowser') !== -1 || url.indexOf('#closeChildBrowser') !== -1)) {
              return window.plugins.childBrowser.close();
            }
          };
          switch (type) {
            case 'event':
              fbUrl = ["https://www.facebook.com/dialog/feed?", "app_id=361157600604985", "&link=" + encodeURIComponent("http://wesawit.com/app/event/" + (record.get('id'))), "&name=" + encodeURIComponent("" + (record.get('title'))), "&caption=" + encodeURIComponent("" + (Ext.util.Format.date(record.get('dateTimeStart'), 'M. j, Y \\a\\t g:i a'))), "&description=" + encodeURIComponent("" + (record.get('description'))), "&display=touch", "&redirect_uri=" + encodeURIComponent("http://wesawit.com/wait#closeChildBrowser")].join('');
              break;
            case 'photo':
              fbUrl = ["https://www.facebook.com/dialog/feed?", "app_id=361157600604985", "&link=" + encodeURIComponent("http://wesawit.com/app/event/" + (record.get('event_id')) + "/" + type + "/" + (record.get('id'))), "&name=" + encodeURIComponent("Photo on WeSawIt"), "&caption=" + encodeURIComponent("" + (Ext.util.Format.date(record.get('timestampTaken'), 'M. j, Y \\a\\t g:i a'))), "&display=touch", "&redirect_uri=" + encodeURIComponent("http://wesawit.com/wait#closeChildBrowser")].join('');
              break;
            case 'video':
              fbUrl = ["https://www.facebook.com/dialog/feed?", "app_id=361157600604985", "&link=" + encodeURIComponent("http://wesawit.com/app/event/" + (record.get('event_id')) + "/" + type + "/" + (record.get('id'))), "&name=" + encodeURIComponent("Video on WeSawIt"), "&caption=" + encodeURIComponent("" + (Ext.util.Format.date(record.get('timestampTaken'), 'M. j, Y \\a\\t g:i a'))), "&display=touch", "&redirect_uri=" + encodeURIComponent("http://wesawit.com/wait#closeChildBrowser")].join('');
          }
          return window.plugins.childBrowser.showWebPage(fbUrl, {
            showLocationBar: false
          });
        } else if (platform === 'email') {
          switch (type) {
            case 'event':
              return window.location = "mailto:?subject=" + (encodeURIComponent(record.get('title'))) + "&body=" + (encodeURIComponent("Check out this event on WeSawIt: http://wesawit.com/app/event/" + record.get('id')));
            case 'photo':
              event = ctrl.getEventDetailsContainer().getEventRecord();
              return window.location = "mailto:?subject=" + (encodeURIComponent('Photo of ' + event.get('title') + ' WeSawIt')) + "&body=" + (encodeURIComponent("Check out this photo on WeSawIt: http://wesawit.com/app/event/" + event.get('id') + "/photo/" + record.get('id')));
            case 'video':
              event = ctrl.getEventDetailsContainer().getEventRecord();
              return window.location = "mailto:?subject=" + (encodeURIComponent('Video of ' + event.get('title') + ' WeSawIt')) + "&body=" + (encodeURIComponent("Check out this video on WeSawIt: http://wesawit.com/app/event/" + event.get('id') + "/video/" + record.get('id')));
          }
        }
      } else {
        if (platform === 'facebook') {
          if (!(window.localStorage.getItem('wsitoken') != null) || window.localStorage.getItem('uid').substr(0, 2) !== 'fb') {
            if (window.localStorage.getItem('wsitoken') != null) {
              navigator.notification.alert('', (function() {}), 'Please log out, then log back in with Facebook.');
            } else {
              navigator.notification.alert('', (function() {}), 'Please log in with Facebook.');
            }
            ctrl.getTopToolbarHomeButton().hide();
            ctrl.getMoreActionsButton().hide();
            ctrl.resetTopToolbarTitle();
            ctrl.getEventsListContainer().setActiveItem(3);
            ctrl.getMainContainer().setActiveItem(0);
            ctrl.getBrowseTab().setActiveItem(0);
            ctrl.getBrowseTab().remove(ctrl.getEventDetailsContainer(), true);
            if (ctrl.getGallery() != null) {
              ctrl.getMainContainer().remove(ctrl.getGallery(), true);
            }
          } else {
            switch (type) {
              case 'event':
                dialogOptions = {
                  link: "http://wesawit.com/app/event/" + (record.get('id')),
                  name: "" + (record.get('title')),
                  caption: "" + (Ext.util.Format.date(record.get('dateTimeStart'), 'M. j, Y \\a\\t g:i a')),
                  description: "" + (record.get('description'))
                };
                break;
              case 'photo':
                event = ctrl.getEventDetailsContainer().getEventRecord();
                dialogOptions = {
                  link: "http://wesawit.com/app/event/" + (record.get('event_id')) + "/" + type + "/" + (record.get('id')),
                  name: "Photo of \"" + (event.get('title')) + "\" on WeSawIt",
                  caption: "" + (Ext.util.Format.date(record.get('timestampTaken'), 'M. j, Y \\a\\t g:i a'))
                };
                break;
              case 'video':
                event = ctrl.getEventDetailsContainer().getEventRecord();
                dialogOptions = {
                  link: "http://wesawit.com/app/event/" + (record.get('event_id')) + "/" + type + "/" + (record.get('id')),
                  name: "Video of \"" + (event.get('title')) + "\" on WeSawIt",
                  caption: "" + (Ext.util.Format.date(record.get('timestampTaken'), 'M. j, Y \\a\\t g:i a'))
                };
            }
            window.plugins.facebookConnect.initWithAppId("361157600604985", function() {
              return window.plugins.facebookConnect.dialog('feed', dialogOptions, (function() {}));
            });
          }
          return true;
        } else if (platform === 'twitter') {
          text = "";
          url = "";
          imageUrl = "";
          switch (type) {
            case 'event':
              text = "\"" + (record.get('title')) + "\" on @wesawitapp";
              url = "http://wesawit.com/app/event/" + (record.get('id'));
              imageUrl = "" + (window.util.image_url(record.getData(), 'large', true, false));
              break;
            case 'photo':
              event = ctrl.getEventDetailsContainer().getEventRecord();
              text = "Photo of \"" + (event.get('title')) + "\" on @wesawitapp";
              url = "http://wesawit.com/app/event/" + (record.get('event_id')) + "/" + type + "/" + (record.get('id'));
              imageUrl = "" + (window.util.image_url(record.getData(), 'large', false, false));
              break;
            case 'video':
              event = ctrl.getEventDetailsContainer().getEventRecord();
              text = "Video of \"" + (event.get('title')) + "\" on @wesawitapp";
              url = "http://wesawit.com/app/event/" + (record.get('event_id')) + "/" + type + "/" + (record.get('id'));
              imageUrl = "" + (window.util.image_url(record.getData(), 'large', false, false));
          }
          window.plugins.twitter.composeTweet((function(s) {}), (function(s) {}), text, {
            urlAttach: url,
            imageAttach: imageUrl
          });
          return true;
        } else if (platform === 'email') {
          switch (type) {
            case 'event':
              return window.location = "mailto:?subject=" + (encodeURIComponent(record.get('title'))) + "&body=" + (encodeURIComponent("Check out this event on WeSawIt: http://wesawit.com/app/event/" + record.get('id')));
            case 'photo':
              event = ctrl.getEventDetailsContainer().getEventRecord();
              return window.location = "mailto:?subject=" + (encodeURIComponent('Photo of ' + event.get('title') + ' WeSawIt')) + "&body=" + (encodeURIComponent("Check out this photo on WeSawIt: http://wesawit.com/app/event/" + event.get('id') + "/photo/" + record.get('id')));
            case 'video':
              event = ctrl.getEventDetailsContainer().getEventRecord();
              return window.location = "mailto:?subject=" + (encodeURIComponent('Video of ' + event.get('title') + ' WeSawIt')) + "&body=" + (encodeURIComponent("Check out this video on WeSawIt: http://wesawit.com/app/event/" + event.get('id') + "/video/" + record.get('id')));
          }
        }
      }
    }
  },
  flagEvent: function(record) {
    if (!navigator.onLine) {
      return navigator.notification.alert('Unable to connect to internet.', (function() {}), 'Oops!');
    } else {
      if (!(window.localStorage.getItem('wsitoken') != null)) {
        this.getTopToolbarHomeButton().hide();
        this.getMoreActionsButton().hide();
        this.resetTopToolbarTitle();
        this.getEventsListContainer().setActiveItem(3);
        this.getMainContainer().setActiveItem(0);
        this.getBrowseTab().setActiveItem(0);
        this.getBrowseTab().remove(this.getEventDetailsContainer(), true);
        if (this.getGallery() != null) {
          return this.getMainContainer().remove(this.getGallery(), true);
        }
      } else {
        if (record.get('flagged_by_me') === false) {
          return Ext.Ajax.request({
            url: "http://wesawit.com/event/flag/" + (record.get('id')) + "/event",
            method: 'POST',
            params: {
              'token': window.localStorage.getItem('wsitoken'),
              'uid': window.localStorage.getItem('uid')
            },
            success: function(response) {
              var resp;
              resp = Ext.decode(response.responseText);
              if (resp.success) {
                record.set('flagged_by_me', true);
                return navigator.notification.alert("Thank you for reporting this event.", (function() {}), "" + (record.get('title')));
              } else if (resp.error_message != null) {
                return navigator.notification.alert('Session has expired, please log out and log in again.', (function() {}), 'Oops!');
              }
            },
            failure: function(response) {
              if ((response.timedout != null) && response.timedout) {
                return navigator.notification.alert('Your internet connection seems to be going too slow.', (function() {}), 'Hmm...');
              } else {
                return navigator.notification.alert('Hmm... idk, you can try again later.', (function() {}), 'Oops!');
              }
            },
            scope: this
          });
        }
      }
    }
  },
  flagMedia: function(type, record) {
    if (!navigator.onLine) {
      return navigator.notification.alert('Unable to connect to internet.', (function() {}), 'Oops!');
    } else {
      if (!(window.localStorage.getItem('wsitoken') != null)) {
        this.getTopToolbarHomeButton().hide();
        this.getMoreActionsButton().hide();
        this.resetTopToolbarTitle();
        this.getEventsListContainer().setActiveItem(3);
        this.getMainContainer().setActiveItem(0);
        this.getBrowseTab().setActiveItem(0);
        this.getBrowseTab().remove(this.getEventDetailsContainer(), true);
        if (this.getGallery() != null) {
          return this.getMainContainer().remove(this.getGallery(), true);
        }
      } else {
        if (record.get('flagged_by_me') === false) {
          return Ext.Ajax.request({
            url: "http://wesawit.com/event/flag/" + (record.get('id')) + "/" + type,
            method: 'POST',
            params: {
              'token': window.localStorage.getItem('wsitoken'),
              'uid': window.localStorage.getItem('uid')
            },
            success: function(response) {
              var resp;
              resp = Ext.decode(response.responseText);
              if (resp.success) {
                record.set('flagged_by_me', true);
                return navigator.notification.alert("", (function() {}), "Thank you for reporting this " + type + ".");
              } else if (resp.error_message != null) {
                return navigator.notification.alert('Session has expired, please log out and log in again.', (function() {}), 'Oops!');
              }
            },
            failure: function(response) {
              if ((response.timedout != null) && response.timedout) {
                return navigator.notification.alert('Your internet connection seems to be going too slow.', (function() {}), 'Hmm...');
              } else {
                return navigator.notification.alert('Hmm... idk, you can try again later.', (function() {}), 'Oops!');
              }
            },
            scope: this
          });
        }
      }
    }
  },
  getAndroidVideoBackgroundImage: function(media) {
    if (media.get('authorUid') === 'vine') {
      return media.get('thumbUrl');
    } else {
      return window.util.image_url(media.getData(), 'large');
    }
  },
  openGallery: function(index, store, dest) {
    var ctrl, gallery, items, medias;
    if (this.getGallery() != null) {
      if (util.DEBUG) {
        console.log('Error: A gallery is already open! Destroying current one first.');
      }
      this.getMainContainer().remove(this.getGallery(), true);
    }
    ctrl = this;
    medias = store.getData().all;
    items = [];
    Ext.each(medias, function(media) {
      var instagram, mediaEntry, mediaType;
      if (media.get('pid') != null) {
        mediaType = 'photo';
      } else {
        mediaType = 'video';
      }
      if (mediaType === 'photo') {
        if (media.get('author').substr(0, 10) === 'instagram_') {
          instagram = true;
        } else {
          instagram = false;
        }
        if (Ext.os.is.Android) {
          mediaEntry = {
            xtype: 'container',
            mid: media.get('id'),
            aeid: media.get('event_id'),
            mediaType: 'photo',
            style: {
              backgroundColor: '#000',
              backgroundImage: "url(" + ((media.get('url') != null) && media.get('url') !== '' ? media.get('url') : "http://wweye1.s3.amazonaws.com/econ_" + (media.get('id')) + ".jpg") + ")",
              backgroundSize: 'contain',
              backgroundRepeat: 'no-repeat',
              backgroundPosition: 'center'
            },
            items: [
              {
                xtype: 'component',
                docked: 'bottom',
                height: 50,
                html: ["<div class='photos-carousel-details' style='text-align:left;'>", "  <div class='photos-carousel-likes'><div class='like-button" + (media.get('deemed_worthy_by_me') ? ' static-liked' : '') + "'></div>" + (media.get('worthinessCount').toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")) + "</div>", "  <div class='share-button'></div>", "  <div class='photos-carousel-author'>" + (instagram ? media.get('author').substr(10) : media.get('author')) + (instagram ? ' <small>via instagram</small>' : '') + "<br />" + (window.util.calc_time(media.get('timestampTaken'))) + "</div>", "</div>"].join('')
              }
            ],
            listeners: {
              tap: {
                element: 'element',
                fn: function(e) {
                  var that;
                  that = this;
                  if (e.target.className.indexOf('like-button') !== -1) {
                    ctrl.un('tap', that);
                    return ctrl.likeMedia('photo', e.target, this.config.mid, media, that);
                  } else if (e.target.className === 'photos-carousel-likes' && e.target.childNodes[0].className.indexOf('like-button') !== -1) {
                    ctrl.un('tap', that);
                    return ctrl.likeMedia('photo', e.target.childNodes[0], this.config.mid, media, that);
                  } else if (e.target.className.indexOf('share-button') !== -1) {
                    return ctrl.showMoreActionsMedia('photo', media);
                  }
                }
              }
            }
          };
        } else {
          mediaEntry = {
            xtype: 'imageviewer',
            style: {
              backgroundColor: '#000'
            },
            initOnActivate: false,
            loadingMessage: '',
            loadingMask: true,
            imageSrc: (media.get('url') != null) && media.get('url') !== '' ? media.get('url') : "http://wweye1.s3.amazonaws.com/econ_" + (media.get('id')) + ".jpg",
            mid: media.get('id'),
            aeid: media.get('aeid'),
            mediaType: 'photo',
            html: ["<figure><img></figure>"].join(''),
            items: [
              {
                xtype: 'component',
                docked: 'bottom',
                height: 50,
                html: ["<div class='photos-carousel-details' style='text-align:left;'>", "  <div class='photos-carousel-likes'><div class='like-button" + (media.get('deemed_worthy_by_me') ? ' static-liked' : '') + "'></div>" + (media.get('worthinessCount').toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")) + "</div>", "  <div class='share-button'></div>", "  <div class='photos-carousel-author'>" + (instagram ? media.get('author').substr(10) : media.get('author')) + (instagram ? ' <small>via instagram</small>' : '') + "<br />" + (window.util.calc_time(media.get('timestampTaken'))) + "</div>", "</div>"].join('')
              }
            ],
            listeners: {
              tap: {
                element: 'element',
                fn: function(e) {
                  var that;
                  that = this;
                  if (e.target.className.indexOf('like-button') !== -1) {
                    ctrl.un('tap', that);
                    return ctrl.likeMedia('photo', e.target, this.config.mid, media, that);
                  } else if (e.target.className === 'photos-carousel-likes' && e.target.childNodes[0].className.indexOf('like-button') !== -1) {
                    ctrl.un('tap', that);
                    return ctrl.likeMedia('photo', e.target.childNodes[0], this.config.mid, media, that);
                  } else if (e.target.className.indexOf('share-button') !== -1) {
                    return ctrl.showMoreActionsMedia('photo', media);
                  }
                }
              }
            }
          };
        }
      } else {
        mediaEntry = {
          xtype: 'container',
          layout: 'vbox',
          pack: 'center',
          align: 'center',
          fullscreen: true,
          style: {
            backgroundColor: '#000'
          },
          mid: media.get('id'),
          aeid: media.get('aeid'),
          mediaType: 'video',
          items: [
            {
              xtype: 'spacer',
              flex: 1
            }, {
              xtype: 'component',
              flex: 8,
              style: {
                textAlign: 'center',
                backgroundColor: '#000',
                backgroundImage: media.get('status') !== 'uploading' && media.get('status') !== 'processing' && Ext.os.is.Android ? "url('resources/images/play-button.png'), url(" + (ctrl.getAndroidVideoBackgroundImage(media)) + ")" : '',
                backgroundSize: '72px 72px, contain',
                backgroundRepeat: 'no-repeat, no-repeat',
                backgroundPosition: 'center, center'
              },
              html: media.get('authorUid') === 'vine' && !Ext.os.is.Android ? ["<video controls='controls' onended='this.webkitExitFullScreen()' preload='none' poster='" + (media.get('thumbUrl')) + "' style='margin:0px auto;min-height: 300px;max-width:90%;max-height:100%;'" + (Ext.os.is.iOS ? ' webkit-playsinline loop="true"' : ' onclick="this.play()"') + ">", "<source src='" + (media.get('url')) + "'>", "</video>"].join('') : media.get('url') === '' && !Ext.os.is.Android ? ["<video controls='controls' onended='this.webkitExitFullScreen()' preload='none' poster='" + (window.util.image_url(media.getData(), 'large')) + "' style='margin:0px auto;min-height: 300px;max-width:90%;max-height:100%;'" + (Ext.os.is.iOS ? ' webkit-playsinline' : ' onclick="this.play()"') + ">", "<source src='http://wweye1.s3.amazonaws.com/iphone_" + (media.get('id')) + ".mp4'>", "</video>"].join('') : media.get('status') === 'processing' && !Ext.os.is.Android ? ["<video controls='controls' preload='none' poster='" + (media.get('thumbUrl')) + "' style='margin:0px auto;min-height: 300px;max-width:90%;max-height:100%;' webkit-playsinline>", "<source src='a-file-that-doesnt-exist-but-gives-crossed-out-play-button.mp4'>", "</video>"].join('') : media.get('status') === 'uploading' || media.get('status') === 'processing' ? ["<div style='margin:48% auto 0px auto;min-height;300px;max-width:100%;max-height:100%;text-align: center; color: white !important; font-size:13px !important;'>This video is not yet available.</div>"].join('') : void 0,
              listeners: {
                tap: {
                  element: 'element',
                  fn: function(e) {
                    if (media.get('status') !== 'uploading' && media.get('status') !== 'processing' && Ext.os.is.Android) {
                      ctrl.pauseDueToPluginIntent = true;
                      if (media.get('authorUid') === 'vine') {
                        return window.plugins.videoPlayer.play("" + (media.get('url')));
                      } else {
                        return window.plugins.videoPlayer.play("http://wweye1.s3.amazonaws.com/iphone_" + (media.get('id')) + ".mp4");
                      }
                    }
                  }
                }
              }
            }, {
              xtype: 'component',
              docked: 'bottom',
              height: 50,
              mid: media.get('id'),
              html: ["<div class='photos-carousel-details' style='text-align:left;'>", "  <div class='photos-carousel-likes'><div class='like-button" + (media.get('deemed_worthy_by_me') ? ' static-liked' : '') + "'></div>" + (media.get('worthinessCount').toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")) + "</div>", "  <div class='share-button'></div>", "  <div class='photos-carousel-author'>" + (media.get('authorUid') === 'vine' ? media.get('author').substr(5) : media.get('author')) + (media.get('authorUid') === 'vine' ? ' <small>via vine</small>' : '') + (media.get('status') === 'processing' ? ' <small>(being processed)</small>' : '') + "<br />" + (window.util.calc_time(media.get('timestampTaken'))) + "</div>", "</div>"].join(''),
              listeners: {
                tap: {
                  element: 'element',
                  fn: function(e) {
                    var that;
                    that = this;
                    if (e.target.className.indexOf('like-button') !== -1) {
                      ctrl.un('tap', that);
                      return ctrl.likeMedia('video', e.target, this.config.mid, media, that);
                    } else if (e.target.className === 'photos-carousel-likes' && e.target.childNodes[0].className.indexOf('like-button') !== -1) {
                      ctrl.un('tap', that);
                      return ctrl.likeMedia('video', e.target.childNodes[0], this.config.mid, media, that);
                    } else if (e.target.className.indexOf('share-button') !== -1) {
                      return ctrl.showMoreActionsMedia('video', media);
                    }
                  }
                }
              }
            }, {
              xtype: 'spacer',
              flex: 1
            }
          ]
        };
      }
      return items.push(mediaEntry);
    });
    gallery = Ext.create('Ext.Carousel', {
      id: 'gallery',
      fullscreen: true,
      ui: 'light',
      indicator: false,
      style: {
        backgroundColor: '#000'
      },
      listeners: {
        initialize: function(container) {
          if (container.getIndicator() != null) {
            return container.getIndicator().onTap = function() {
              return true;
            };
          }
        },
        activeitemchange: function(c, value, oldValue, eOpts) {
          var _base;
          if ((value != null) && (oldValue != null)) {
            if (typeof oldValue.resetZoom === "function") {
              oldValue.resetZoom();
            }
            if (typeof (_base = this.getActiveItem()).resize === "function") {
              _base.resize();
            }
            if (this.getActiveIndex() === 0) {
              if (items[this.leftIndex - 1] != null) {
                this.leftIndex -= 1;
                return this.insert(0, items[this.leftIndex]);
              }
            } else if (this.getActiveIndex() === this.getItems().length - 1) {
              if (items[this.rightIndex + 1] != null) {
                this.rightIndex += 1;
                return this.add(items[this.rightIndex]);
              }
            }
          }
        },
        resize: function(c, eOpts) {
          var _base;
          return typeof (_base = this.getActiveItem()).resize === "function" ? _base.resize() : void 0;
        },
        dragstart: {
          element: 'element',
          fn: function(e) {
            var scroller;
            if (this.getActiveItem().getScrollable() != null) {
              scroller = this.getActiveItem().getScrollable().getScroller();
              if (e.targetTouches.length === 1 && (e.deltaX < 0 && scroller.position.x >= scroller.getMaxPosition().x) || (e.deltaX > 0 && scroller.position.x <= 0)) {
                return true;
              } else {
                return false;
              }
            } else {
              return true;
            }
          }
        },
        drag: {
          element: 'element',
          fn: function(e) {
            var scroller;
            if (this.getActiveItem().getScrollable() != null) {
              scroller = this.getActiveItem().getScrollable().getScroller();
              if (e.targetTouches.length === 1 && (e.deltaX < 0 && scroller.position.x >= scroller.getMaxPosition().x) || (e.deltaX > 0 && scroller.position.x <= 0)) {
                return true;
              } else {
                return false;
              }
            } else {
              return true;
            }
          }
        },
        dragend: {
          element: 'element',
          fn: function(e) {
            var scroller;
            if (this.getActiveItem().getScrollable() != null) {
              scroller = this.getActiveItem().getScrollable().getScroller();
              if (e.targetTouches.length < 2 && (e.deltaX < 0 && scroller.position.x >= scroller.getMaxPosition().x) || (e.deltaX > 0 && scroller.position.x <= 0)) {
                return true;
              } else {
                return false;
              }
            } else {
              return true;
            }
          }
        }
      }
    });
    gallery.add(items[index]);
    gallery.rightIndex = index;
    gallery.leftIndex = index;
    if (items[index + 1] != null) {
      gallery.rightIndex += 1;
      gallery.add(items[gallery.rightIndex]);
    }
    if (items[index - 1] != null) {
      gallery.leftIndex -= 1;
      gallery.insert(0, items[gallery.leftIndex]);
      gallery.setActiveItem(1);
    } else {
      gallery.setActiveItem(0);
    }
    this.getTopToolbarHomeButton().config.dest = dest;
    this.getMoreActionsButton().hide();
    return this.getMainContainer().setActiveItem(gallery);
  },
  reinstateDynamicLists: function() {
    var obj;
    if ((window.localStorage.getItem('listOfCategories') != null) && (window.localStorage.getItem('listOfCategoriesCacheExpiration') != null) && parseInt(window.localStorage.getItem('listOfCategoriesCacheExpiration')) > parseInt(Ext.util.Format.date(new Date(), 'Ymd'))) {
      obj = Ext.decode(window.localStorage.getItem('listOfCategories'));
      return this.setListOfCategories(obj.categories);
    } else {
      return Ext.Ajax.request({
        url: "http://wesawit.com/event/get_list_of_categories",
        method: 'GET',
        scope: this,
        timeout: 15000,
        success: function(response) {
          var date;
          window.localStorage.setItem('listOfCategories', response.responseText);
          date = new Date((new Date()).getTime() + (10 * 24 * 60 * 60 * 1000));
          window.localStorage.setItem('listOfCategoriesCacheExpiration', Ext.util.Format.date(date, 'Ymd'));
          obj = Ext.decode(response.responseText);
          return this.setListOfCategories(obj.categories);
        },
        failure: function(response) {
          return this.setListOfCategories(['Social', 'Emergency', 'Arts', 'Business', 'Comedy', 'Culture', 'Dance', 'Fashion', 'Film', 'Food & Drink', 'Health', 'Music', 'Politics', 'Sports', 'Tech & Sci', 'Theater']);
        }
      });
    }
  },
  grabCurrentPosition: function() {
    var geolocationErrorCallback, geolocationSuccessCallback;
    geolocationSuccessCallback = Ext.bind(this.geolocationSuccess, this);
    geolocationErrorCallback = Ext.bind(this.geolocationError, this);
    return navigator.geolocation.getCurrentPosition(geolocationSuccessCallback, geolocationErrorCallback, {
      maximumAge: 0,
      enableHighAccuracy: true
    });
  },
  generateRandomMid: function() {
    return Math.floor(Math.random() * 1000000000) + 1000000000;
  },
  resetTopToolbarTitle: function() {
    this.getTopToolbar().setTitle('');
    return this.getTopToolbar().removeCls('hide-logo');
  },
  revertTopToolbarTitle: function() {
    if (this.topToolbarLastTitle != null) {
      this.getTopToolbar().addCls('hide-logo');
      return this.getTopToolbar().setTitle(this.topToolbarLastTitle);
    } else {
      return this.resetTopToolbarTitle();
    }
  },
  refreshMap: function(senchaMap, nameOfStore) {
    var d, data, eventData, infoWindow, map, marker, markers, status, _i, _len;
    map = senchaMap.map;
    data = Ext.getStore(nameOfStore).getData().all;
    senchaMap.config.currLocMarker = new L.Marker(new L.LatLng(window.localStorage.getItem("locationLat"), window.localStorage.getItem("locationLng")), {
      zIndexOffset: 97,
      icon: new L.Icon({
        iconUrl: "resources/images/map-pin-curr-loc.gif",
        iconAnchor: [12, 12],
        iconSize: [24, 24]
      })
    });
    senchaMap.config.currLocMarker.addTo(map);
    markers = new L.LayerGroup();
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      eventData = d.data;
      status = "past";
      if (new Date(Ext.util.Format.date(eventData.dateTimeStart, "c")) > new Date()) {
        status = "future";
      } else {
        if (new Date(Ext.util.Format.date(eventData.dateTimeStart, "c")) < new Date() && new Date(Ext.util.Format.date(eventData.dateTimeEnd, "c")) > new Date()) {
          status = "present";
        }
      }
      marker = (function(eventData) {
        return marker = new L.Marker(new L.LatLng(eventData.locationLat, eventData.locationLng), {
          zIndexOffset: status === "present" ? 100 : status === "future" ? 99 : 98,
          icon: new L.Icon({
            iconSize: [32, 32],
            iconAnchor: [16, 32],
            popupAnchor: [0, -27],
            iconUrl: "resources/images/map-pin-" + status + ".png"
          })
        });
      })(eventData);
      infoWindow = (function(eventData, nameOfStore) {
        return ["<div class=\"x-list-item info-bubble\" onclick=\"WSI.app.getController('Events').onViewEventCommand(null,Ext.getStore('" + nameOfStore + "').getById('" + eventData.id + "'))\">", "<div class=\"list-item-top-cap\">", "" + (window.util.calc_time(eventData.dateTimeStart, eventData.dateTimeEnd)), "<div class='distance-away'>" + (window.util.calc_distance(eventData.locationLat, eventData.locationLng)) + "</div>", "<div class='location-text'>" + eventData.locationName + "</div>", "</div>", "<div class='list-item-thumb' style='background-image: url(" + (window.util.image_url(eventData, "medium", true)) + ");'></div>", "<div class=\"list-item-bottom-cap\">", "<div class='title-text'>" + eventData.title + "</div>", "<div class='view-count'>" + (window.util.commaize_number(eventData.viewCount)) + " view" + (eventData.viewCount === 1 ? "s" : "") + "</div>", "<div class='photo-count'>" + (window.util.commaize_number(eventData.photos.length)) + "</div>", "<div class='video-count'>" + (window.util.commaize_number(eventData.videos.length)) + "</div>", "</div>", "</div>"].join("");
      })(eventData, nameOfStore, marker);
      marker.bindPopup(infoWindow, {
        minWidth: 310,
        width: 310,
        maxWidth: 310,
        minHeight: 240,
        height: 240,
        maxHeight: 240,
        closeButton: false
      });
      marker.addTo(markers);
    }
    return markers.addTo(map);
  },
  getSuggestionsFromGoogle: function(existingSuggestions, suggestionsCmp, simple) {
    var lat, latlng, lng, that;
    if (simple == null) {
      simple = false;
    }
    that = this;
    lat = parseFloat(window.localStorage.getItem('locationLat'));
    lng = parseFloat(window.localStorage.getItem('locationLng'));
    if (!navigator.onLine) {
      return navigator.notification.alert('Unable to connect to the internet.', (function() {}), 'Oops!');
    } else {
      latlng = new google.maps.LatLng(lat, lng);
      if (!(document.placesService != null)) {
        document.placesService = new google.maps.places.PlacesService(document.getElementById('gmap-container').children[0]);
      }
      return document.placesService.nearbySearch({
        'location': latlng,
        'radius': '50',
        'types': ['street_address', 'room', 'point_of_interest', 'establishment', 'post_office', 'night_club', 'museum', 'park', 'local_government_office', 'library', 'hospital', 'gym', 'fire_station', 'embassy', 'courthouse', 'city_hall', 'cemetery', 'casino', 'art_gallery', 'amusement_park', 'airport']
      }, function(placeResults, placesServiceStatus, placeSearchPagination) {
        var i, _i, _ref;
        if (placesServiceStatus === google.maps.places.PlacesServiceStatus.OK && placeResults.length > 0) {
          if (simple === true) {
            return that.newEventChooseLocation(placeResults[0].name, placeResults[0].vicinity, placeResults[0].geometry.location.lat(), placeResults[0].geometry.location.lng(), placeResults[0].types[0]);
          } else {
            for (i = _i = 0, _ref = Math.min(20, placeResults.length - 1); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              existingSuggestions.push({
                'locationName': placeResults[i].name,
                'locationVicinity': placeResults[i].vicinity,
                'locationLat': placeResults[i].geometry.location.lat(),
                'locationLng': placeResults[i].geometry.location.lng(),
                'locationType': placeResults[i].types[0],
                'photos': placeResults[i].photos,
                'icon': placeResults[i].icon
              });
            }
            return suggestionsCmp.setData(existingSuggestions);
          }
        }
      });
    }
  },
  generateSuggestions: function(suggestionsCmp, simple) {
    var b, bbCenters, bbDists, i, lat, lng, maxRadius, s2, sugg, suggestions, usedLocs, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref;
    if (simple == null) {
      simple = false;
    }
    suggestions = new Array();
    if ((window.localStorage.getItem('locationLat') != null) && (window.localStorage.getItem('locationLng') != null)) {
      lat = parseFloat(window.localStorage.getItem('locationLat'));
      lng = parseFloat(window.localStorage.getItem('locationLng'));
      bbCenters = new Array();
      usedLocs = new Array();
      _ref = window.util.customLocations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        maxRadius = Math.max((b[1] - b[3]) * 68.88 * 1609.344, (b[2] - b[4]) * -1 * 59.95 * 1609.344) / 2;
        bbCenters.push([b[0], b[3] + (b[1] - b[3]) / 2, b[4] + (b[2] - b[4]) / 2, maxRadius]);
        if (lat < b[1] && lng > b[2] && lat > b[3] && lng < b[4] && usedLocs.indexOf(b[0]) === -1) {
          usedLocs.push(b[0]);
          suggestions.push([b[0], lat, lng, 'UCLA, Los Angeles', maxRadius]);
        }
      }
      bbDists = new Array();
      for (_j = 0, _len1 = bbCenters.length; _j < _len1; _j++) {
        b = bbCenters[_j];
        bbDists.push([b[0], b[1], b[2], Math.sqrt((lat - b[1]) * (lat - b[1]) + (lng - b[2]) * (lng - b[2]))]);
      }
      bbDists.sort(function(a, b) {
        return a[3] - b[3];
      });
      for (_k = 0, _len2 = bbDists.length; _k < _len2; _k++) {
        i = bbDists[_k];
        if (i[3] < 0.001105146596 && usedLocs.indexOf(i[0]) === -1) {
          usedLocs.push(i[0]);
          suggestions.push([i[0], i[1], i[2], 'UCLA, Los Angeles', i[3]]);
        }
      }
      if (suggestions.length > 0 && simple === true) {
        return this.newEventChooseLocation(suggestions[0][0], suggestions[0][3], suggestions[0][1], suggestions[0][2], "custom_radius:" + (parseInt(suggestions[0][4])));
      } else if (suggestions.length > 3) {
        s2 = new Array();
        for (_l = 0, _len3 = suggestions.length; _l < _len3; _l++) {
          sugg = suggestions[_l];
          s2.push({
            'locationName': sugg[0],
            'locationVicinity': sugg[3],
            'locationLat': sugg[1],
            'locationLng': sugg[2],
            'locationType': "custom_radius:" + (parseInt(sugg[4]))
          });
        }
        return suggestionsCmp.setData(s2);
      } else {
        s2 = new Array();
        for (_m = 0, _len4 = suggestions.length; _m < _len4; _m++) {
          sugg = suggestions[_m];
          s2.push({
            'locationName': sugg[0],
            'locationVicinity': sugg[3],
            'locationLat': sugg[1],
            'locationLng': sugg[2],
            'locationType': "custom_radius:" + (parseInt(sugg[4]))
          });
        }
        return this.getSuggestionsFromGoogle(s2, suggestionsCmp, simple);
      }
    } else {
      if (simple === true) {
        return this.newEventChooseLocation('Choose location...');
      } else {
        return suggestionsCmp.setData({
          locationName: '',
          locationVicinity: '',
          locationLat: '0',
          locationLng: '0'
        });
      }
    }
  }
});
